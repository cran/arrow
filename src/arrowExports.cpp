// Generated by using data-raw/codegen.R -> do not edit by hand
#include "./arrow_types.h"
#include <Rcpp.h>

using namespace Rcpp;

// array.cpp
#if defined(ARROW_R_WITH_ARROW)
std::shared_ptr<arrow::Array> Array__Slice1(const std::shared_ptr<arrow::Array>& array, int offset);
RcppExport SEXP _arrow_Array__Slice1(SEXP array_sexp, SEXP offset_sexp){
BEGIN_RCPP
	Rcpp::traits::input_parameter<const std::shared_ptr<arrow::Array>&>::type array(array_sexp);
	Rcpp::traits::input_parameter<int>::type offset(offset_sexp);
	return Rcpp::wrap(Array__Slice1(array, offset));
END_RCPP
}
#else
RcppExport SEXP _arrow_Array__Slice1(SEXP array_sexp, SEXP offset_sexp){
	Rf_error("Cannot call Array__Slice1(). Please use arrow::install_arrow() to install required runtime libraries. ");
}
#endif

// array.cpp
#if defined(ARROW_R_WITH_ARROW)
std::shared_ptr<arrow::Array> Array__Slice2(const std::shared_ptr<arrow::Array>& array, int offset, int length);
RcppExport SEXP _arrow_Array__Slice2(SEXP array_sexp, SEXP offset_sexp, SEXP length_sexp){
BEGIN_RCPP
	Rcpp::traits::input_parameter<const std::shared_ptr<arrow::Array>&>::type array(array_sexp);
	Rcpp::traits::input_parameter<int>::type offset(offset_sexp);
	Rcpp::traits::input_parameter<int>::type length(length_sexp);
	return Rcpp::wrap(Array__Slice2(array, offset, length));
END_RCPP
}
#else
RcppExport SEXP _arrow_Array__Slice2(SEXP array_sexp, SEXP offset_sexp, SEXP length_sexp){
	Rf_error("Cannot call Array__Slice2(). Please use arrow::install_arrow() to install required runtime libraries. ");
}
#endif

// array.cpp
#if defined(ARROW_R_WITH_ARROW)
bool Array__IsNull(const std::shared_ptr<arrow::Array>& x, int i);
RcppExport SEXP _arrow_Array__IsNull(SEXP x_sexp, SEXP i_sexp){
BEGIN_RCPP
	Rcpp::traits::input_parameter<const std::shared_ptr<arrow::Array>&>::type x(x_sexp);
	Rcpp::traits::input_parameter<int>::type i(i_sexp);
	return Rcpp::wrap(Array__IsNull(x, i));
END_RCPP
}
#else
RcppExport SEXP _arrow_Array__IsNull(SEXP x_sexp, SEXP i_sexp){
	Rf_error("Cannot call Array__IsNull(). Please use arrow::install_arrow() to install required runtime libraries. ");
}
#endif

// array.cpp
#if defined(ARROW_R_WITH_ARROW)
bool Array__IsValid(const std::shared_ptr<arrow::Array>& x, int i);
RcppExport SEXP _arrow_Array__IsValid(SEXP x_sexp, SEXP i_sexp){
BEGIN_RCPP
	Rcpp::traits::input_parameter<const std::shared_ptr<arrow::Array>&>::type x(x_sexp);
	Rcpp::traits::input_parameter<int>::type i(i_sexp);
	return Rcpp::wrap(Array__IsValid(x, i));
END_RCPP
}
#else
RcppExport SEXP _arrow_Array__IsValid(SEXP x_sexp, SEXP i_sexp){
	Rf_error("Cannot call Array__IsValid(). Please use arrow::install_arrow() to install required runtime libraries. ");
}
#endif

// array.cpp
#if defined(ARROW_R_WITH_ARROW)
int Array__length(const std::shared_ptr<arrow::Array>& x);
RcppExport SEXP _arrow_Array__length(SEXP x_sexp){
BEGIN_RCPP
	Rcpp::traits::input_parameter<const std::shared_ptr<arrow::Array>&>::type x(x_sexp);
	return Rcpp::wrap(Array__length(x));
END_RCPP
}
#else
RcppExport SEXP _arrow_Array__length(SEXP x_sexp){
	Rf_error("Cannot call Array__length(). Please use arrow::install_arrow() to install required runtime libraries. ");
}
#endif

// array.cpp
#if defined(ARROW_R_WITH_ARROW)
int Array__offset(const std::shared_ptr<arrow::Array>& x);
RcppExport SEXP _arrow_Array__offset(SEXP x_sexp){
BEGIN_RCPP
	Rcpp::traits::input_parameter<const std::shared_ptr<arrow::Array>&>::type x(x_sexp);
	return Rcpp::wrap(Array__offset(x));
END_RCPP
}
#else
RcppExport SEXP _arrow_Array__offset(SEXP x_sexp){
	Rf_error("Cannot call Array__offset(). Please use arrow::install_arrow() to install required runtime libraries. ");
}
#endif

// array.cpp
#if defined(ARROW_R_WITH_ARROW)
int Array__null_count(const std::shared_ptr<arrow::Array>& x);
RcppExport SEXP _arrow_Array__null_count(SEXP x_sexp){
BEGIN_RCPP
	Rcpp::traits::input_parameter<const std::shared_ptr<arrow::Array>&>::type x(x_sexp);
	return Rcpp::wrap(Array__null_count(x));
END_RCPP
}
#else
RcppExport SEXP _arrow_Array__null_count(SEXP x_sexp){
	Rf_error("Cannot call Array__null_count(). Please use arrow::install_arrow() to install required runtime libraries. ");
}
#endif

// array.cpp
#if defined(ARROW_R_WITH_ARROW)
std::shared_ptr<arrow::DataType> Array__type(const std::shared_ptr<arrow::Array>& x);
RcppExport SEXP _arrow_Array__type(SEXP x_sexp){
BEGIN_RCPP
	Rcpp::traits::input_parameter<const std::shared_ptr<arrow::Array>&>::type x(x_sexp);
	return Rcpp::wrap(Array__type(x));
END_RCPP
}
#else
RcppExport SEXP _arrow_Array__type(SEXP x_sexp){
	Rf_error("Cannot call Array__type(). Please use arrow::install_arrow() to install required runtime libraries. ");
}
#endif

// array.cpp
#if defined(ARROW_R_WITH_ARROW)
std::string Array__ToString(const std::shared_ptr<arrow::Array>& x);
RcppExport SEXP _arrow_Array__ToString(SEXP x_sexp){
BEGIN_RCPP
	Rcpp::traits::input_parameter<const std::shared_ptr<arrow::Array>&>::type x(x_sexp);
	return Rcpp::wrap(Array__ToString(x));
END_RCPP
}
#else
RcppExport SEXP _arrow_Array__ToString(SEXP x_sexp){
	Rf_error("Cannot call Array__ToString(). Please use arrow::install_arrow() to install required runtime libraries. ");
}
#endif

// array.cpp
#if defined(ARROW_R_WITH_ARROW)
arrow::Type::type Array__type_id(const std::shared_ptr<arrow::Array>& x);
RcppExport SEXP _arrow_Array__type_id(SEXP x_sexp){
BEGIN_RCPP
	Rcpp::traits::input_parameter<const std::shared_ptr<arrow::Array>&>::type x(x_sexp);
	return Rcpp::wrap(Array__type_id(x));
END_RCPP
}
#else
RcppExport SEXP _arrow_Array__type_id(SEXP x_sexp){
	Rf_error("Cannot call Array__type_id(). Please use arrow::install_arrow() to install required runtime libraries. ");
}
#endif

// array.cpp
#if defined(ARROW_R_WITH_ARROW)
bool Array__Equals(const std::shared_ptr<arrow::Array>& lhs, const std::shared_ptr<arrow::Array>& rhs);
RcppExport SEXP _arrow_Array__Equals(SEXP lhs_sexp, SEXP rhs_sexp){
BEGIN_RCPP
	Rcpp::traits::input_parameter<const std::shared_ptr<arrow::Array>&>::type lhs(lhs_sexp);
	Rcpp::traits::input_parameter<const std::shared_ptr<arrow::Array>&>::type rhs(rhs_sexp);
	return Rcpp::wrap(Array__Equals(lhs, rhs));
END_RCPP
}
#else
RcppExport SEXP _arrow_Array__Equals(SEXP lhs_sexp, SEXP rhs_sexp){
	Rf_error("Cannot call Array__Equals(). Please use arrow::install_arrow() to install required runtime libraries. ");
}
#endif

// array.cpp
#if defined(ARROW_R_WITH_ARROW)
bool Array__ApproxEquals(const std::shared_ptr<arrow::Array>& lhs, const std::shared_ptr<arrow::Array>& rhs);
RcppExport SEXP _arrow_Array__ApproxEquals(SEXP lhs_sexp, SEXP rhs_sexp){
BEGIN_RCPP
	Rcpp::traits::input_parameter<const std::shared_ptr<arrow::Array>&>::type lhs(lhs_sexp);
	Rcpp::traits::input_parameter<const std::shared_ptr<arrow::Array>&>::type rhs(rhs_sexp);
	return Rcpp::wrap(Array__ApproxEquals(lhs, rhs));
END_RCPP
}
#else
RcppExport SEXP _arrow_Array__ApproxEquals(SEXP lhs_sexp, SEXP rhs_sexp){
	Rf_error("Cannot call Array__ApproxEquals(). Please use arrow::install_arrow() to install required runtime libraries. ");
}
#endif

// array.cpp
#if defined(ARROW_R_WITH_ARROW)
std::shared_ptr<arrow::ArrayData> Array__data(const std::shared_ptr<arrow::Array>& array);
RcppExport SEXP _arrow_Array__data(SEXP array_sexp){
BEGIN_RCPP
	Rcpp::traits::input_parameter<const std::shared_ptr<arrow::Array>&>::type array(array_sexp);
	return Rcpp::wrap(Array__data(array));
END_RCPP
}
#else
RcppExport SEXP _arrow_Array__data(SEXP array_sexp){
	Rf_error("Cannot call Array__data(). Please use arrow::install_arrow() to install required runtime libraries. ");
}
#endif

// array.cpp
#if defined(ARROW_R_WITH_ARROW)
bool Array__RangeEquals(const std::shared_ptr<arrow::Array>& self, const std::shared_ptr<arrow::Array>& other, int start_idx, int end_idx, int other_start_idx);
RcppExport SEXP _arrow_Array__RangeEquals(SEXP self_sexp, SEXP other_sexp, SEXP start_idx_sexp, SEXP end_idx_sexp, SEXP other_start_idx_sexp){
BEGIN_RCPP
	Rcpp::traits::input_parameter<const std::shared_ptr<arrow::Array>&>::type self(self_sexp);
	Rcpp::traits::input_parameter<const std::shared_ptr<arrow::Array>&>::type other(other_sexp);
	Rcpp::traits::input_parameter<int>::type start_idx(start_idx_sexp);
	Rcpp::traits::input_parameter<int>::type end_idx(end_idx_sexp);
	Rcpp::traits::input_parameter<int>::type other_start_idx(other_start_idx_sexp);
	return Rcpp::wrap(Array__RangeEquals(self, other, start_idx, end_idx, other_start_idx));
END_RCPP
}
#else
RcppExport SEXP _arrow_Array__RangeEquals(SEXP self_sexp, SEXP other_sexp, SEXP start_idx_sexp, SEXP end_idx_sexp, SEXP other_start_idx_sexp){
	Rf_error("Cannot call Array__RangeEquals(). Please use arrow::install_arrow() to install required runtime libraries. ");
}
#endif

// array.cpp
#if defined(ARROW_R_WITH_ARROW)
LogicalVector Array__Mask(const std::shared_ptr<arrow::Array>& array);
RcppExport SEXP _arrow_Array__Mask(SEXP array_sexp){
BEGIN_RCPP
	Rcpp::traits::input_parameter<const std::shared_ptr<arrow::Array>&>::type array(array_sexp);
	return Rcpp::wrap(Array__Mask(array));
END_RCPP
}
#else
RcppExport SEXP _arrow_Array__Mask(SEXP array_sexp){
	Rf_error("Cannot call Array__Mask(). Please use arrow::install_arrow() to install required runtime libraries. ");
}
#endif

// array.cpp
#if defined(ARROW_R_WITH_ARROW)
std::shared_ptr<arrow::Array> DictionaryArray__indices(const std::shared_ptr<arrow::DictionaryArray>& array);
RcppExport SEXP _arrow_DictionaryArray__indices(SEXP array_sexp){
BEGIN_RCPP
	Rcpp::traits::input_parameter<const std::shared_ptr<arrow::DictionaryArray>&>::type array(array_sexp);
	return Rcpp::wrap(DictionaryArray__indices(array));
END_RCPP
}
#else
RcppExport SEXP _arrow_DictionaryArray__indices(SEXP array_sexp){
	Rf_error("Cannot call DictionaryArray__indices(). Please use arrow::install_arrow() to install required runtime libraries. ");
}
#endif

// array.cpp
#if defined(ARROW_R_WITH_ARROW)
std::shared_ptr<arrow::Array> DictionaryArray__dictionary(const std::shared_ptr<arrow::DictionaryArray>& array);
RcppExport SEXP _arrow_DictionaryArray__dictionary(SEXP array_sexp){
BEGIN_RCPP
	Rcpp::traits::input_parameter<const std::shared_ptr<arrow::DictionaryArray>&>::type array(array_sexp);
	return Rcpp::wrap(DictionaryArray__dictionary(array));
END_RCPP
}
#else
RcppExport SEXP _arrow_DictionaryArray__dictionary(SEXP array_sexp){
	Rf_error("Cannot call DictionaryArray__dictionary(). Please use arrow::install_arrow() to install required runtime libraries. ");
}
#endif

// array.cpp
#if defined(ARROW_R_WITH_ARROW)
std::shared_ptr<arrow::Array> StructArray__field(const std::shared_ptr<arrow::StructArray>& array, int i);
RcppExport SEXP _arrow_StructArray__field(SEXP array_sexp, SEXP i_sexp){
BEGIN_RCPP
	Rcpp::traits::input_parameter<const std::shared_ptr<arrow::StructArray>&>::type array(array_sexp);
	Rcpp::traits::input_parameter<int>::type i(i_sexp);
	return Rcpp::wrap(StructArray__field(array, i));
END_RCPP
}
#else
RcppExport SEXP _arrow_StructArray__field(SEXP array_sexp, SEXP i_sexp){
	Rf_error("Cannot call StructArray__field(). Please use arrow::install_arrow() to install required runtime libraries. ");
}
#endif

// array.cpp
#if defined(ARROW_R_WITH_ARROW)
std::shared_ptr<arrow::Array> StructArray__GetFieldByName(const std::shared_ptr<arrow::StructArray>& array, const std::string& name);
RcppExport SEXP _arrow_StructArray__GetFieldByName(SEXP array_sexp, SEXP name_sexp){
BEGIN_RCPP
	Rcpp::traits::input_parameter<const std::shared_ptr<arrow::StructArray>&>::type array(array_sexp);
	Rcpp::traits::input_parameter<const std::string&>::type name(name_sexp);
	return Rcpp::wrap(StructArray__GetFieldByName(array, name));
END_RCPP
}
#else
RcppExport SEXP _arrow_StructArray__GetFieldByName(SEXP array_sexp, SEXP name_sexp){
	Rf_error("Cannot call StructArray__GetFieldByName(). Please use arrow::install_arrow() to install required runtime libraries. ");
}
#endif

// array.cpp
#if defined(ARROW_R_WITH_ARROW)
arrow::ArrayVector StructArray__Flatten(const std::shared_ptr<arrow::StructArray>& array);
RcppExport SEXP _arrow_StructArray__Flatten(SEXP array_sexp){
BEGIN_RCPP
	Rcpp::traits::input_parameter<const std::shared_ptr<arrow::StructArray>&>::type array(array_sexp);
	return Rcpp::wrap(StructArray__Flatten(array));
END_RCPP
}
#else
RcppExport SEXP _arrow_StructArray__Flatten(SEXP array_sexp){
	Rf_error("Cannot call StructArray__Flatten(). Please use arrow::install_arrow() to install required runtime libraries. ");
}
#endif

// array.cpp
#if defined(ARROW_R_WITH_ARROW)
std::shared_ptr<arrow::DataType> ListArray__value_type(const std::shared_ptr<arrow::ListArray>& array);
RcppExport SEXP _arrow_ListArray__value_type(SEXP array_sexp){
BEGIN_RCPP
	Rcpp::traits::input_parameter<const std::shared_ptr<arrow::ListArray>&>::type array(array_sexp);
	return Rcpp::wrap(ListArray__value_type(array));
END_RCPP
}
#else
RcppExport SEXP _arrow_ListArray__value_type(SEXP array_sexp){
	Rf_error("Cannot call ListArray__value_type(). Please use arrow::install_arrow() to install required runtime libraries. ");
}
#endif

// array.cpp
#if defined(ARROW_R_WITH_ARROW)
std::shared_ptr<arrow::Array> ListArray__values(const std::shared_ptr<arrow::ListArray>& array);
RcppExport SEXP _arrow_ListArray__values(SEXP array_sexp){
BEGIN_RCPP
	Rcpp::traits::input_parameter<const std::shared_ptr<arrow::ListArray>&>::type array(array_sexp);
	return Rcpp::wrap(ListArray__values(array));
END_RCPP
}
#else
RcppExport SEXP _arrow_ListArray__values(SEXP array_sexp){
	Rf_error("Cannot call ListArray__values(). Please use arrow::install_arrow() to install required runtime libraries. ");
}
#endif

// array.cpp
#if defined(ARROW_R_WITH_ARROW)
int32_t ListArray__value_length(const std::shared_ptr<arrow::ListArray>& array, int64_t i);
RcppExport SEXP _arrow_ListArray__value_length(SEXP array_sexp, SEXP i_sexp){
BEGIN_RCPP
	Rcpp::traits::input_parameter<const std::shared_ptr<arrow::ListArray>&>::type array(array_sexp);
	Rcpp::traits::input_parameter<int64_t>::type i(i_sexp);
	return Rcpp::wrap(ListArray__value_length(array, i));
END_RCPP
}
#else
RcppExport SEXP _arrow_ListArray__value_length(SEXP array_sexp, SEXP i_sexp){
	Rf_error("Cannot call ListArray__value_length(). Please use arrow::install_arrow() to install required runtime libraries. ");
}
#endif

// array.cpp
#if defined(ARROW_R_WITH_ARROW)
int32_t ListArray__value_offset(const std::shared_ptr<arrow::ListArray>& array, int64_t i);
RcppExport SEXP _arrow_ListArray__value_offset(SEXP array_sexp, SEXP i_sexp){
BEGIN_RCPP
	Rcpp::traits::input_parameter<const std::shared_ptr<arrow::ListArray>&>::type array(array_sexp);
	Rcpp::traits::input_parameter<int64_t>::type i(i_sexp);
	return Rcpp::wrap(ListArray__value_offset(array, i));
END_RCPP
}
#else
RcppExport SEXP _arrow_ListArray__value_offset(SEXP array_sexp, SEXP i_sexp){
	Rf_error("Cannot call ListArray__value_offset(). Please use arrow::install_arrow() to install required runtime libraries. ");
}
#endif

// array.cpp
#if defined(ARROW_R_WITH_ARROW)
Rcpp::IntegerVector ListArray__raw_value_offsets(const std::shared_ptr<arrow::ListArray>& array);
RcppExport SEXP _arrow_ListArray__raw_value_offsets(SEXP array_sexp){
BEGIN_RCPP
	Rcpp::traits::input_parameter<const std::shared_ptr<arrow::ListArray>&>::type array(array_sexp);
	return Rcpp::wrap(ListArray__raw_value_offsets(array));
END_RCPP
}
#else
RcppExport SEXP _arrow_ListArray__raw_value_offsets(SEXP array_sexp){
	Rf_error("Cannot call ListArray__raw_value_offsets(). Please use arrow::install_arrow() to install required runtime libraries. ");
}
#endif

// array__to_vector.cpp
#if defined(ARROW_R_WITH_ARROW)
SEXP Array__as_vector(const std::shared_ptr<arrow::Array>& array);
RcppExport SEXP _arrow_Array__as_vector(SEXP array_sexp){
BEGIN_RCPP
	Rcpp::traits::input_parameter<const std::shared_ptr<arrow::Array>&>::type array(array_sexp);
	return Rcpp::wrap(Array__as_vector(array));
END_RCPP
}
#else
RcppExport SEXP _arrow_Array__as_vector(SEXP array_sexp){
	Rf_error("Cannot call Array__as_vector(). Please use arrow::install_arrow() to install required runtime libraries. ");
}
#endif

// array__to_vector.cpp
#if defined(ARROW_R_WITH_ARROW)
SEXP ChunkedArray__as_vector(const std::shared_ptr<arrow::ChunkedArray>& chunked_array);
RcppExport SEXP _arrow_ChunkedArray__as_vector(SEXP chunked_array_sexp){
BEGIN_RCPP
	Rcpp::traits::input_parameter<const std::shared_ptr<arrow::ChunkedArray>&>::type chunked_array(chunked_array_sexp);
	return Rcpp::wrap(ChunkedArray__as_vector(chunked_array));
END_RCPP
}
#else
RcppExport SEXP _arrow_ChunkedArray__as_vector(SEXP chunked_array_sexp){
	Rf_error("Cannot call ChunkedArray__as_vector(). Please use arrow::install_arrow() to install required runtime libraries. ");
}
#endif

// array__to_vector.cpp
#if defined(ARROW_R_WITH_ARROW)
Rcpp::List RecordBatch__to_dataframe(const std::shared_ptr<arrow::RecordBatch>& batch, bool use_threads);
RcppExport SEXP _arrow_RecordBatch__to_dataframe(SEXP batch_sexp, SEXP use_threads_sexp){
BEGIN_RCPP
	Rcpp::traits::input_parameter<const std::shared_ptr<arrow::RecordBatch>&>::type batch(batch_sexp);
	Rcpp::traits::input_parameter<bool>::type use_threads(use_threads_sexp);
	return Rcpp::wrap(RecordBatch__to_dataframe(batch, use_threads));
END_RCPP
}
#else
RcppExport SEXP _arrow_RecordBatch__to_dataframe(SEXP batch_sexp, SEXP use_threads_sexp){
	Rf_error("Cannot call RecordBatch__to_dataframe(). Please use arrow::install_arrow() to install required runtime libraries. ");
}
#endif

// array__to_vector.cpp
#if defined(ARROW_R_WITH_ARROW)
Rcpp::List Table__to_dataframe(const std::shared_ptr<arrow::Table>& table, bool use_threads);
RcppExport SEXP _arrow_Table__to_dataframe(SEXP table_sexp, SEXP use_threads_sexp){
BEGIN_RCPP
	Rcpp::traits::input_parameter<const std::shared_ptr<arrow::Table>&>::type table(table_sexp);
	Rcpp::traits::input_parameter<bool>::type use_threads(use_threads_sexp);
	return Rcpp::wrap(Table__to_dataframe(table, use_threads));
END_RCPP
}
#else
RcppExport SEXP _arrow_Table__to_dataframe(SEXP table_sexp, SEXP use_threads_sexp){
	Rf_error("Cannot call Table__to_dataframe(). Please use arrow::install_arrow() to install required runtime libraries. ");
}
#endif

// array_from_vector.cpp
#if defined(ARROW_R_WITH_ARROW)
std::shared_ptr<arrow::DataType> Array__infer_type(SEXP x);
RcppExport SEXP _arrow_Array__infer_type(SEXP x_sexp){
BEGIN_RCPP
	Rcpp::traits::input_parameter<SEXP>::type x(x_sexp);
	return Rcpp::wrap(Array__infer_type(x));
END_RCPP
}
#else
RcppExport SEXP _arrow_Array__infer_type(SEXP x_sexp){
	Rf_error("Cannot call Array__infer_type(). Please use arrow::install_arrow() to install required runtime libraries. ");
}
#endif

// array_from_vector.cpp
#if defined(ARROW_R_WITH_ARROW)
std::shared_ptr<arrow::Array> Array__from_vector(SEXP x, SEXP s_type);
RcppExport SEXP _arrow_Array__from_vector(SEXP x_sexp, SEXP s_type_sexp){
BEGIN_RCPP
	Rcpp::traits::input_parameter<SEXP>::type x(x_sexp);
	Rcpp::traits::input_parameter<SEXP>::type s_type(s_type_sexp);
	return Rcpp::wrap(Array__from_vector(x, s_type));
END_RCPP
}
#else
RcppExport SEXP _arrow_Array__from_vector(SEXP x_sexp, SEXP s_type_sexp){
	Rf_error("Cannot call Array__from_vector(). Please use arrow::install_arrow() to install required runtime libraries. ");
}
#endif

// array_from_vector.cpp
#if defined(ARROW_R_WITH_ARROW)
std::shared_ptr<arrow::ChunkedArray> ChunkedArray__from_list(Rcpp::List chunks, SEXP s_type);
RcppExport SEXP _arrow_ChunkedArray__from_list(SEXP chunks_sexp, SEXP s_type_sexp){
BEGIN_RCPP
	Rcpp::traits::input_parameter<Rcpp::List>::type chunks(chunks_sexp);
	Rcpp::traits::input_parameter<SEXP>::type s_type(s_type_sexp);
	return Rcpp::wrap(ChunkedArray__from_list(chunks, s_type));
END_RCPP
}
#else
RcppExport SEXP _arrow_ChunkedArray__from_list(SEXP chunks_sexp, SEXP s_type_sexp){
	Rf_error("Cannot call ChunkedArray__from_list(). Please use arrow::install_arrow() to install required runtime libraries. ");
}
#endif

// arraydata.cpp
#if defined(ARROW_R_WITH_ARROW)
std::shared_ptr<arrow::DataType> ArrayData__get_type(const std::shared_ptr<arrow::ArrayData>& x);
RcppExport SEXP _arrow_ArrayData__get_type(SEXP x_sexp){
BEGIN_RCPP
	Rcpp::traits::input_parameter<const std::shared_ptr<arrow::ArrayData>&>::type x(x_sexp);
	return Rcpp::wrap(ArrayData__get_type(x));
END_RCPP
}
#else
RcppExport SEXP _arrow_ArrayData__get_type(SEXP x_sexp){
	Rf_error("Cannot call ArrayData__get_type(). Please use arrow::install_arrow() to install required runtime libraries. ");
}
#endif

// arraydata.cpp
#if defined(ARROW_R_WITH_ARROW)
int ArrayData__get_length(const std::shared_ptr<arrow::ArrayData>& x);
RcppExport SEXP _arrow_ArrayData__get_length(SEXP x_sexp){
BEGIN_RCPP
	Rcpp::traits::input_parameter<const std::shared_ptr<arrow::ArrayData>&>::type x(x_sexp);
	return Rcpp::wrap(ArrayData__get_length(x));
END_RCPP
}
#else
RcppExport SEXP _arrow_ArrayData__get_length(SEXP x_sexp){
	Rf_error("Cannot call ArrayData__get_length(). Please use arrow::install_arrow() to install required runtime libraries. ");
}
#endif

// arraydata.cpp
#if defined(ARROW_R_WITH_ARROW)
int ArrayData__get_null_count(const std::shared_ptr<arrow::ArrayData>& x);
RcppExport SEXP _arrow_ArrayData__get_null_count(SEXP x_sexp){
BEGIN_RCPP
	Rcpp::traits::input_parameter<const std::shared_ptr<arrow::ArrayData>&>::type x(x_sexp);
	return Rcpp::wrap(ArrayData__get_null_count(x));
END_RCPP
}
#else
RcppExport SEXP _arrow_ArrayData__get_null_count(SEXP x_sexp){
	Rf_error("Cannot call ArrayData__get_null_count(). Please use arrow::install_arrow() to install required runtime libraries. ");
}
#endif

// arraydata.cpp
#if defined(ARROW_R_WITH_ARROW)
int ArrayData__get_offset(const std::shared_ptr<arrow::ArrayData>& x);
RcppExport SEXP _arrow_ArrayData__get_offset(SEXP x_sexp){
BEGIN_RCPP
	Rcpp::traits::input_parameter<const std::shared_ptr<arrow::ArrayData>&>::type x(x_sexp);
	return Rcpp::wrap(ArrayData__get_offset(x));
END_RCPP
}
#else
RcppExport SEXP _arrow_ArrayData__get_offset(SEXP x_sexp){
	Rf_error("Cannot call ArrayData__get_offset(). Please use arrow::install_arrow() to install required runtime libraries. ");
}
#endif

// arraydata.cpp
#if defined(ARROW_R_WITH_ARROW)
List ArrayData__buffers(const std::shared_ptr<arrow::ArrayData>& x);
RcppExport SEXP _arrow_ArrayData__buffers(SEXP x_sexp){
BEGIN_RCPP
	Rcpp::traits::input_parameter<const std::shared_ptr<arrow::ArrayData>&>::type x(x_sexp);
	return Rcpp::wrap(ArrayData__buffers(x));
END_RCPP
}
#else
RcppExport SEXP _arrow_ArrayData__buffers(SEXP x_sexp){
	Rf_error("Cannot call ArrayData__buffers(). Please use arrow::install_arrow() to install required runtime libraries. ");
}
#endif

// buffer.cpp
#if defined(ARROW_R_WITH_ARROW)
bool Buffer__is_mutable(const std::shared_ptr<arrow::Buffer>& buffer);
RcppExport SEXP _arrow_Buffer__is_mutable(SEXP buffer_sexp){
BEGIN_RCPP
	Rcpp::traits::input_parameter<const std::shared_ptr<arrow::Buffer>&>::type buffer(buffer_sexp);
	return Rcpp::wrap(Buffer__is_mutable(buffer));
END_RCPP
}
#else
RcppExport SEXP _arrow_Buffer__is_mutable(SEXP buffer_sexp){
	Rf_error("Cannot call Buffer__is_mutable(). Please use arrow::install_arrow() to install required runtime libraries. ");
}
#endif

// buffer.cpp
#if defined(ARROW_R_WITH_ARROW)
void Buffer__ZeroPadding(const std::shared_ptr<arrow::Buffer>& buffer);
RcppExport SEXP _arrow_Buffer__ZeroPadding(SEXP buffer_sexp){
BEGIN_RCPP
	Rcpp::traits::input_parameter<const std::shared_ptr<arrow::Buffer>&>::type buffer(buffer_sexp);
	Buffer__ZeroPadding(buffer);
	return R_NilValue;
END_RCPP
}
#else
RcppExport SEXP _arrow_Buffer__ZeroPadding(SEXP buffer_sexp){
	Rf_error("Cannot call Buffer__ZeroPadding(). Please use arrow::install_arrow() to install required runtime libraries. ");
}
#endif

// buffer.cpp
#if defined(ARROW_R_WITH_ARROW)
int64_t Buffer__capacity(const std::shared_ptr<arrow::Buffer>& buffer);
RcppExport SEXP _arrow_Buffer__capacity(SEXP buffer_sexp){
BEGIN_RCPP
	Rcpp::traits::input_parameter<const std::shared_ptr<arrow::Buffer>&>::type buffer(buffer_sexp);
	return Rcpp::wrap(Buffer__capacity(buffer));
END_RCPP
}
#else
RcppExport SEXP _arrow_Buffer__capacity(SEXP buffer_sexp){
	Rf_error("Cannot call Buffer__capacity(). Please use arrow::install_arrow() to install required runtime libraries. ");
}
#endif

// buffer.cpp
#if defined(ARROW_R_WITH_ARROW)
int64_t Buffer__size(const std::shared_ptr<arrow::Buffer>& buffer);
RcppExport SEXP _arrow_Buffer__size(SEXP buffer_sexp){
BEGIN_RCPP
	Rcpp::traits::input_parameter<const std::shared_ptr<arrow::Buffer>&>::type buffer(buffer_sexp);
	return Rcpp::wrap(Buffer__size(buffer));
END_RCPP
}
#else
RcppExport SEXP _arrow_Buffer__size(SEXP buffer_sexp){
	Rf_error("Cannot call Buffer__size(). Please use arrow::install_arrow() to install required runtime libraries. ");
}
#endif

// buffer.cpp
#if defined(ARROW_R_WITH_ARROW)
std::shared_ptr<arrow::Buffer> r___RBuffer__initialize(SEXP x);
RcppExport SEXP _arrow_r___RBuffer__initialize(SEXP x_sexp){
BEGIN_RCPP
	Rcpp::traits::input_parameter<SEXP>::type x(x_sexp);
	return Rcpp::wrap(r___RBuffer__initialize(x));
END_RCPP
}
#else
RcppExport SEXP _arrow_r___RBuffer__initialize(SEXP x_sexp){
	Rf_error("Cannot call r___RBuffer__initialize(). Please use arrow::install_arrow() to install required runtime libraries. ");
}
#endif

// buffer.cpp
#if defined(ARROW_R_WITH_ARROW)
Rcpp::RawVector Buffer__data(const std::shared_ptr<arrow::Buffer>& buffer);
RcppExport SEXP _arrow_Buffer__data(SEXP buffer_sexp){
BEGIN_RCPP
	Rcpp::traits::input_parameter<const std::shared_ptr<arrow::Buffer>&>::type buffer(buffer_sexp);
	return Rcpp::wrap(Buffer__data(buffer));
END_RCPP
}
#else
RcppExport SEXP _arrow_Buffer__data(SEXP buffer_sexp){
	Rf_error("Cannot call Buffer__data(). Please use arrow::install_arrow() to install required runtime libraries. ");
}
#endif

// chunkedarray.cpp
#if defined(ARROW_R_WITH_ARROW)
int ChunkedArray__length(const std::shared_ptr<arrow::ChunkedArray>& chunked_array);
RcppExport SEXP _arrow_ChunkedArray__length(SEXP chunked_array_sexp){
BEGIN_RCPP
	Rcpp::traits::input_parameter<const std::shared_ptr<arrow::ChunkedArray>&>::type chunked_array(chunked_array_sexp);
	return Rcpp::wrap(ChunkedArray__length(chunked_array));
END_RCPP
}
#else
RcppExport SEXP _arrow_ChunkedArray__length(SEXP chunked_array_sexp){
	Rf_error("Cannot call ChunkedArray__length(). Please use arrow::install_arrow() to install required runtime libraries. ");
}
#endif

// chunkedarray.cpp
#if defined(ARROW_R_WITH_ARROW)
int ChunkedArray__null_count(const std::shared_ptr<arrow::ChunkedArray>& chunked_array);
RcppExport SEXP _arrow_ChunkedArray__null_count(SEXP chunked_array_sexp){
BEGIN_RCPP
	Rcpp::traits::input_parameter<const std::shared_ptr<arrow::ChunkedArray>&>::type chunked_array(chunked_array_sexp);
	return Rcpp::wrap(ChunkedArray__null_count(chunked_array));
END_RCPP
}
#else
RcppExport SEXP _arrow_ChunkedArray__null_count(SEXP chunked_array_sexp){
	Rf_error("Cannot call ChunkedArray__null_count(). Please use arrow::install_arrow() to install required runtime libraries. ");
}
#endif

// chunkedarray.cpp
#if defined(ARROW_R_WITH_ARROW)
int ChunkedArray__num_chunks(const std::shared_ptr<arrow::ChunkedArray>& chunked_array);
RcppExport SEXP _arrow_ChunkedArray__num_chunks(SEXP chunked_array_sexp){
BEGIN_RCPP
	Rcpp::traits::input_parameter<const std::shared_ptr<arrow::ChunkedArray>&>::type chunked_array(chunked_array_sexp);
	return Rcpp::wrap(ChunkedArray__num_chunks(chunked_array));
END_RCPP
}
#else
RcppExport SEXP _arrow_ChunkedArray__num_chunks(SEXP chunked_array_sexp){
	Rf_error("Cannot call ChunkedArray__num_chunks(). Please use arrow::install_arrow() to install required runtime libraries. ");
}
#endif

// chunkedarray.cpp
#if defined(ARROW_R_WITH_ARROW)
std::shared_ptr<arrow::Array> ChunkedArray__chunk(const std::shared_ptr<arrow::ChunkedArray>& chunked_array, int i);
RcppExport SEXP _arrow_ChunkedArray__chunk(SEXP chunked_array_sexp, SEXP i_sexp){
BEGIN_RCPP
	Rcpp::traits::input_parameter<const std::shared_ptr<arrow::ChunkedArray>&>::type chunked_array(chunked_array_sexp);
	Rcpp::traits::input_parameter<int>::type i(i_sexp);
	return Rcpp::wrap(ChunkedArray__chunk(chunked_array, i));
END_RCPP
}
#else
RcppExport SEXP _arrow_ChunkedArray__chunk(SEXP chunked_array_sexp, SEXP i_sexp){
	Rf_error("Cannot call ChunkedArray__chunk(). Please use arrow::install_arrow() to install required runtime libraries. ");
}
#endif

// chunkedarray.cpp
#if defined(ARROW_R_WITH_ARROW)
List ChunkedArray__chunks(const std::shared_ptr<arrow::ChunkedArray>& chunked_array);
RcppExport SEXP _arrow_ChunkedArray__chunks(SEXP chunked_array_sexp){
BEGIN_RCPP
	Rcpp::traits::input_parameter<const std::shared_ptr<arrow::ChunkedArray>&>::type chunked_array(chunked_array_sexp);
	return Rcpp::wrap(ChunkedArray__chunks(chunked_array));
END_RCPP
}
#else
RcppExport SEXP _arrow_ChunkedArray__chunks(SEXP chunked_array_sexp){
	Rf_error("Cannot call ChunkedArray__chunks(). Please use arrow::install_arrow() to install required runtime libraries. ");
}
#endif

// chunkedarray.cpp
#if defined(ARROW_R_WITH_ARROW)
std::shared_ptr<arrow::DataType> ChunkedArray__type(const std::shared_ptr<arrow::ChunkedArray>& chunked_array);
RcppExport SEXP _arrow_ChunkedArray__type(SEXP chunked_array_sexp){
BEGIN_RCPP
	Rcpp::traits::input_parameter<const std::shared_ptr<arrow::ChunkedArray>&>::type chunked_array(chunked_array_sexp);
	return Rcpp::wrap(ChunkedArray__type(chunked_array));
END_RCPP
}
#else
RcppExport SEXP _arrow_ChunkedArray__type(SEXP chunked_array_sexp){
	Rf_error("Cannot call ChunkedArray__type(). Please use arrow::install_arrow() to install required runtime libraries. ");
}
#endif

// chunkedarray.cpp
#if defined(ARROW_R_WITH_ARROW)
std::shared_ptr<arrow::ChunkedArray> ChunkArray__Slice1(const std::shared_ptr<arrow::ChunkedArray>& chunked_array, int offset);
RcppExport SEXP _arrow_ChunkArray__Slice1(SEXP chunked_array_sexp, SEXP offset_sexp){
BEGIN_RCPP
	Rcpp::traits::input_parameter<const std::shared_ptr<arrow::ChunkedArray>&>::type chunked_array(chunked_array_sexp);
	Rcpp::traits::input_parameter<int>::type offset(offset_sexp);
	return Rcpp::wrap(ChunkArray__Slice1(chunked_array, offset));
END_RCPP
}
#else
RcppExport SEXP _arrow_ChunkArray__Slice1(SEXP chunked_array_sexp, SEXP offset_sexp){
	Rf_error("Cannot call ChunkArray__Slice1(). Please use arrow::install_arrow() to install required runtime libraries. ");
}
#endif

// chunkedarray.cpp
#if defined(ARROW_R_WITH_ARROW)
std::shared_ptr<arrow::ChunkedArray> ChunkArray__Slice2(const std::shared_ptr<arrow::ChunkedArray>& chunked_array, int offset, int length);
RcppExport SEXP _arrow_ChunkArray__Slice2(SEXP chunked_array_sexp, SEXP offset_sexp, SEXP length_sexp){
BEGIN_RCPP
	Rcpp::traits::input_parameter<const std::shared_ptr<arrow::ChunkedArray>&>::type chunked_array(chunked_array_sexp);
	Rcpp::traits::input_parameter<int>::type offset(offset_sexp);
	Rcpp::traits::input_parameter<int>::type length(length_sexp);
	return Rcpp::wrap(ChunkArray__Slice2(chunked_array, offset, length));
END_RCPP
}
#else
RcppExport SEXP _arrow_ChunkArray__Slice2(SEXP chunked_array_sexp, SEXP offset_sexp, SEXP length_sexp){
	Rf_error("Cannot call ChunkArray__Slice2(). Please use arrow::install_arrow() to install required runtime libraries. ");
}
#endif

// column.cpp
#if defined(ARROW_R_WITH_ARROW)
int Column__length(const std::shared_ptr<arrow::Column>& column);
RcppExport SEXP _arrow_Column__length(SEXP column_sexp){
BEGIN_RCPP
	Rcpp::traits::input_parameter<const std::shared_ptr<arrow::Column>&>::type column(column_sexp);
	return Rcpp::wrap(Column__length(column));
END_RCPP
}
#else
RcppExport SEXP _arrow_Column__length(SEXP column_sexp){
	Rf_error("Cannot call Column__length(). Please use arrow::install_arrow() to install required runtime libraries. ");
}
#endif

// column.cpp
#if defined(ARROW_R_WITH_ARROW)
int Column__null_count(const std::shared_ptr<arrow::Column>& column);
RcppExport SEXP _arrow_Column__null_count(SEXP column_sexp){
BEGIN_RCPP
	Rcpp::traits::input_parameter<const std::shared_ptr<arrow::Column>&>::type column(column_sexp);
	return Rcpp::wrap(Column__null_count(column));
END_RCPP
}
#else
RcppExport SEXP _arrow_Column__null_count(SEXP column_sexp){
	Rf_error("Cannot call Column__null_count(). Please use arrow::install_arrow() to install required runtime libraries. ");
}
#endif

// column.cpp
#if defined(ARROW_R_WITH_ARROW)
std::shared_ptr<arrow::DataType> Column__type(const std::shared_ptr<arrow::Column>& column);
RcppExport SEXP _arrow_Column__type(SEXP column_sexp){
BEGIN_RCPP
	Rcpp::traits::input_parameter<const std::shared_ptr<arrow::Column>&>::type column(column_sexp);
	return Rcpp::wrap(Column__type(column));
END_RCPP
}
#else
RcppExport SEXP _arrow_Column__type(SEXP column_sexp){
	Rf_error("Cannot call Column__type(). Please use arrow::install_arrow() to install required runtime libraries. ");
}
#endif

// column.cpp
#if defined(ARROW_R_WITH_ARROW)
std::shared_ptr<arrow::ChunkedArray> Column__data(const std::shared_ptr<arrow::Column>& column);
RcppExport SEXP _arrow_Column__data(SEXP column_sexp){
BEGIN_RCPP
	Rcpp::traits::input_parameter<const std::shared_ptr<arrow::Column>&>::type column(column_sexp);
	return Rcpp::wrap(Column__data(column));
END_RCPP
}
#else
RcppExport SEXP _arrow_Column__data(SEXP column_sexp){
	Rf_error("Cannot call Column__data(). Please use arrow::install_arrow() to install required runtime libraries. ");
}
#endif

// compression.cpp
#if defined(ARROW_R_WITH_ARROW)
std::unique_ptr<arrow::util::Codec> util___Codec__Create(arrow::Compression::type codec);
RcppExport SEXP _arrow_util___Codec__Create(SEXP codec_sexp){
BEGIN_RCPP
	Rcpp::traits::input_parameter<arrow::Compression::type>::type codec(codec_sexp);
	return Rcpp::wrap(util___Codec__Create(codec));
END_RCPP
}
#else
RcppExport SEXP _arrow_util___Codec__Create(SEXP codec_sexp){
	Rf_error("Cannot call util___Codec__Create(). Please use arrow::install_arrow() to install required runtime libraries. ");
}
#endif

// compression.cpp
#if defined(ARROW_R_WITH_ARROW)
std::shared_ptr<arrow::io::CompressedOutputStream> io___CompressedOutputStream__Make(const std::unique_ptr<arrow::util::Codec>& codec, const std::shared_ptr<arrow::io::OutputStream>& raw);
RcppExport SEXP _arrow_io___CompressedOutputStream__Make(SEXP codec_sexp, SEXP raw_sexp){
BEGIN_RCPP
	Rcpp::traits::input_parameter<const std::unique_ptr<arrow::util::Codec>&>::type codec(codec_sexp);
	Rcpp::traits::input_parameter<const std::shared_ptr<arrow::io::OutputStream>&>::type raw(raw_sexp);
	return Rcpp::wrap(io___CompressedOutputStream__Make(codec, raw));
END_RCPP
}
#else
RcppExport SEXP _arrow_io___CompressedOutputStream__Make(SEXP codec_sexp, SEXP raw_sexp){
	Rf_error("Cannot call io___CompressedOutputStream__Make(). Please use arrow::install_arrow() to install required runtime libraries. ");
}
#endif

// compression.cpp
#if defined(ARROW_R_WITH_ARROW)
std::shared_ptr<arrow::io::CompressedInputStream> io___CompressedInputStream__Make(const std::unique_ptr<arrow::util::Codec>& codec, const std::shared_ptr<arrow::io::InputStream>& raw);
RcppExport SEXP _arrow_io___CompressedInputStream__Make(SEXP codec_sexp, SEXP raw_sexp){
BEGIN_RCPP
	Rcpp::traits::input_parameter<const std::unique_ptr<arrow::util::Codec>&>::type codec(codec_sexp);
	Rcpp::traits::input_parameter<const std::shared_ptr<arrow::io::InputStream>&>::type raw(raw_sexp);
	return Rcpp::wrap(io___CompressedInputStream__Make(codec, raw));
END_RCPP
}
#else
RcppExport SEXP _arrow_io___CompressedInputStream__Make(SEXP codec_sexp, SEXP raw_sexp){
	Rf_error("Cannot call io___CompressedInputStream__Make(). Please use arrow::install_arrow() to install required runtime libraries. ");
}
#endif

// compute.cpp
#if defined(ARROW_R_WITH_ARROW)
std::shared_ptr<arrow::compute::CastOptions> compute___CastOptions__initialize(bool allow_int_overflow, bool allow_time_truncate, bool allow_float_truncate);
RcppExport SEXP _arrow_compute___CastOptions__initialize(SEXP allow_int_overflow_sexp, SEXP allow_time_truncate_sexp, SEXP allow_float_truncate_sexp){
BEGIN_RCPP
	Rcpp::traits::input_parameter<bool>::type allow_int_overflow(allow_int_overflow_sexp);
	Rcpp::traits::input_parameter<bool>::type allow_time_truncate(allow_time_truncate_sexp);
	Rcpp::traits::input_parameter<bool>::type allow_float_truncate(allow_float_truncate_sexp);
	return Rcpp::wrap(compute___CastOptions__initialize(allow_int_overflow, allow_time_truncate, allow_float_truncate));
END_RCPP
}
#else
RcppExport SEXP _arrow_compute___CastOptions__initialize(SEXP allow_int_overflow_sexp, SEXP allow_time_truncate_sexp, SEXP allow_float_truncate_sexp){
	Rf_error("Cannot call compute___CastOptions__initialize(). Please use arrow::install_arrow() to install required runtime libraries. ");
}
#endif

// compute.cpp
#if defined(ARROW_R_WITH_ARROW)
std::shared_ptr<arrow::Array> Array__cast(const std::shared_ptr<arrow::Array>& array, const std::shared_ptr<arrow::DataType>& target_type, const std::shared_ptr<arrow::compute::CastOptions>& options);
RcppExport SEXP _arrow_Array__cast(SEXP array_sexp, SEXP target_type_sexp, SEXP options_sexp){
BEGIN_RCPP
	Rcpp::traits::input_parameter<const std::shared_ptr<arrow::Array>&>::type array(array_sexp);
	Rcpp::traits::input_parameter<const std::shared_ptr<arrow::DataType>&>::type target_type(target_type_sexp);
	Rcpp::traits::input_parameter<const std::shared_ptr<arrow::compute::CastOptions>&>::type options(options_sexp);
	return Rcpp::wrap(Array__cast(array, target_type, options));
END_RCPP
}
#else
RcppExport SEXP _arrow_Array__cast(SEXP array_sexp, SEXP target_type_sexp, SEXP options_sexp){
	Rf_error("Cannot call Array__cast(). Please use arrow::install_arrow() to install required runtime libraries. ");
}
#endif

// compute.cpp
#if defined(ARROW_R_WITH_ARROW)
std::shared_ptr<arrow::ChunkedArray> ChunkedArray__cast(const std::shared_ptr<arrow::ChunkedArray>& chunked_array, const std::shared_ptr<arrow::DataType>& target_type, const std::shared_ptr<arrow::compute::CastOptions>& options);
RcppExport SEXP _arrow_ChunkedArray__cast(SEXP chunked_array_sexp, SEXP target_type_sexp, SEXP options_sexp){
BEGIN_RCPP
	Rcpp::traits::input_parameter<const std::shared_ptr<arrow::ChunkedArray>&>::type chunked_array(chunked_array_sexp);
	Rcpp::traits::input_parameter<const std::shared_ptr<arrow::DataType>&>::type target_type(target_type_sexp);
	Rcpp::traits::input_parameter<const std::shared_ptr<arrow::compute::CastOptions>&>::type options(options_sexp);
	return Rcpp::wrap(ChunkedArray__cast(chunked_array, target_type, options));
END_RCPP
}
#else
RcppExport SEXP _arrow_ChunkedArray__cast(SEXP chunked_array_sexp, SEXP target_type_sexp, SEXP options_sexp){
	Rf_error("Cannot call ChunkedArray__cast(). Please use arrow::install_arrow() to install required runtime libraries. ");
}
#endif

// compute.cpp
#if defined(ARROW_R_WITH_ARROW)
std::shared_ptr<arrow::RecordBatch> RecordBatch__cast(const std::shared_ptr<arrow::RecordBatch>& batch, const std::shared_ptr<arrow::Schema>& schema, const std::shared_ptr<arrow::compute::CastOptions>& options);
RcppExport SEXP _arrow_RecordBatch__cast(SEXP batch_sexp, SEXP schema_sexp, SEXP options_sexp){
BEGIN_RCPP
	Rcpp::traits::input_parameter<const std::shared_ptr<arrow::RecordBatch>&>::type batch(batch_sexp);
	Rcpp::traits::input_parameter<const std::shared_ptr<arrow::Schema>&>::type schema(schema_sexp);
	Rcpp::traits::input_parameter<const std::shared_ptr<arrow::compute::CastOptions>&>::type options(options_sexp);
	return Rcpp::wrap(RecordBatch__cast(batch, schema, options));
END_RCPP
}
#else
RcppExport SEXP _arrow_RecordBatch__cast(SEXP batch_sexp, SEXP schema_sexp, SEXP options_sexp){
	Rf_error("Cannot call RecordBatch__cast(). Please use arrow::install_arrow() to install required runtime libraries. ");
}
#endif

// compute.cpp
#if defined(ARROW_R_WITH_ARROW)
std::shared_ptr<arrow::Table> Table__cast(const std::shared_ptr<arrow::Table>& table, const std::shared_ptr<arrow::Schema>& schema, const std::shared_ptr<arrow::compute::CastOptions>& options);
RcppExport SEXP _arrow_Table__cast(SEXP table_sexp, SEXP schema_sexp, SEXP options_sexp){
BEGIN_RCPP
	Rcpp::traits::input_parameter<const std::shared_ptr<arrow::Table>&>::type table(table_sexp);
	Rcpp::traits::input_parameter<const std::shared_ptr<arrow::Schema>&>::type schema(schema_sexp);
	Rcpp::traits::input_parameter<const std::shared_ptr<arrow::compute::CastOptions>&>::type options(options_sexp);
	return Rcpp::wrap(Table__cast(table, schema, options));
END_RCPP
}
#else
RcppExport SEXP _arrow_Table__cast(SEXP table_sexp, SEXP schema_sexp, SEXP options_sexp){
	Rf_error("Cannot call Table__cast(). Please use arrow::install_arrow() to install required runtime libraries. ");
}
#endif

// csv.cpp
#if defined(ARROW_R_WITH_ARROW)
std::shared_ptr<arrow::csv::ReadOptions> csv___ReadOptions__initialize(List_ options);
RcppExport SEXP _arrow_csv___ReadOptions__initialize(SEXP options_sexp){
BEGIN_RCPP
	Rcpp::traits::input_parameter<List_>::type options(options_sexp);
	return Rcpp::wrap(csv___ReadOptions__initialize(options));
END_RCPP
}
#else
RcppExport SEXP _arrow_csv___ReadOptions__initialize(SEXP options_sexp){
	Rf_error("Cannot call csv___ReadOptions__initialize(). Please use arrow::install_arrow() to install required runtime libraries. ");
}
#endif

// csv.cpp
#if defined(ARROW_R_WITH_ARROW)
std::shared_ptr<arrow::csv::ParseOptions> csv___ParseOptions__initialize(List_ options);
RcppExport SEXP _arrow_csv___ParseOptions__initialize(SEXP options_sexp){
BEGIN_RCPP
	Rcpp::traits::input_parameter<List_>::type options(options_sexp);
	return Rcpp::wrap(csv___ParseOptions__initialize(options));
END_RCPP
}
#else
RcppExport SEXP _arrow_csv___ParseOptions__initialize(SEXP options_sexp){
	Rf_error("Cannot call csv___ParseOptions__initialize(). Please use arrow::install_arrow() to install required runtime libraries. ");
}
#endif

// csv.cpp
#if defined(ARROW_R_WITH_ARROW)
std::shared_ptr<arrow::csv::ConvertOptions> csv___ConvertOptions__initialize(List_ options);
RcppExport SEXP _arrow_csv___ConvertOptions__initialize(SEXP options_sexp){
BEGIN_RCPP
	Rcpp::traits::input_parameter<List_>::type options(options_sexp);
	return Rcpp::wrap(csv___ConvertOptions__initialize(options));
END_RCPP
}
#else
RcppExport SEXP _arrow_csv___ConvertOptions__initialize(SEXP options_sexp){
	Rf_error("Cannot call csv___ConvertOptions__initialize(). Please use arrow::install_arrow() to install required runtime libraries. ");
}
#endif

// csv.cpp
#if defined(ARROW_R_WITH_ARROW)
std::shared_ptr<arrow::csv::TableReader> csv___TableReader__Make(const std::shared_ptr<arrow::io::InputStream>& input, const std::shared_ptr<arrow::csv::ReadOptions>& read_options, const std::shared_ptr<arrow::csv::ParseOptions>& parse_options, const std::shared_ptr<arrow::csv::ConvertOptions>& convert_options);
RcppExport SEXP _arrow_csv___TableReader__Make(SEXP input_sexp, SEXP read_options_sexp, SEXP parse_options_sexp, SEXP convert_options_sexp){
BEGIN_RCPP
	Rcpp::traits::input_parameter<const std::shared_ptr<arrow::io::InputStream>&>::type input(input_sexp);
	Rcpp::traits::input_parameter<const std::shared_ptr<arrow::csv::ReadOptions>&>::type read_options(read_options_sexp);
	Rcpp::traits::input_parameter<const std::shared_ptr<arrow::csv::ParseOptions>&>::type parse_options(parse_options_sexp);
	Rcpp::traits::input_parameter<const std::shared_ptr<arrow::csv::ConvertOptions>&>::type convert_options(convert_options_sexp);
	return Rcpp::wrap(csv___TableReader__Make(input, read_options, parse_options, convert_options));
END_RCPP
}
#else
RcppExport SEXP _arrow_csv___TableReader__Make(SEXP input_sexp, SEXP read_options_sexp, SEXP parse_options_sexp, SEXP convert_options_sexp){
	Rf_error("Cannot call csv___TableReader__Make(). Please use arrow::install_arrow() to install required runtime libraries. ");
}
#endif

// csv.cpp
#if defined(ARROW_R_WITH_ARROW)
std::shared_ptr<arrow::Table> csv___TableReader__Read(const std::shared_ptr<arrow::csv::TableReader>& table_reader);
RcppExport SEXP _arrow_csv___TableReader__Read(SEXP table_reader_sexp){
BEGIN_RCPP
	Rcpp::traits::input_parameter<const std::shared_ptr<arrow::csv::TableReader>&>::type table_reader(table_reader_sexp);
	return Rcpp::wrap(csv___TableReader__Read(table_reader));
END_RCPP
}
#else
RcppExport SEXP _arrow_csv___TableReader__Read(SEXP table_reader_sexp){
	Rf_error("Cannot call csv___TableReader__Read(). Please use arrow::install_arrow() to install required runtime libraries. ");
}
#endif

// datatype.cpp
#if defined(ARROW_R_WITH_ARROW)
bool shared_ptr_is_null(SEXP xp);
RcppExport SEXP _arrow_shared_ptr_is_null(SEXP xp_sexp){
BEGIN_RCPP
	Rcpp::traits::input_parameter<SEXP>::type xp(xp_sexp);
	return Rcpp::wrap(shared_ptr_is_null(xp));
END_RCPP
}
#else
RcppExport SEXP _arrow_shared_ptr_is_null(SEXP xp_sexp){
	Rf_error("Cannot call shared_ptr_is_null(). Please use arrow::install_arrow() to install required runtime libraries. ");
}
#endif

// datatype.cpp
#if defined(ARROW_R_WITH_ARROW)
bool unique_ptr_is_null(SEXP xp);
RcppExport SEXP _arrow_unique_ptr_is_null(SEXP xp_sexp){
BEGIN_RCPP
	Rcpp::traits::input_parameter<SEXP>::type xp(xp_sexp);
	return Rcpp::wrap(unique_ptr_is_null(xp));
END_RCPP
}
#else
RcppExport SEXP _arrow_unique_ptr_is_null(SEXP xp_sexp){
	Rf_error("Cannot call unique_ptr_is_null(). Please use arrow::install_arrow() to install required runtime libraries. ");
}
#endif

// datatype.cpp
#if defined(ARROW_R_WITH_ARROW)
std::shared_ptr<arrow::DataType> Int8__initialize();
RcppExport SEXP _arrow_Int8__initialize(){
BEGIN_RCPP
	return Rcpp::wrap(Int8__initialize());
END_RCPP
}
#else
RcppExport SEXP _arrow_Int8__initialize(){
	Rf_error("Cannot call Int8__initialize(). Please use arrow::install_arrow() to install required runtime libraries. ");
}
#endif

// datatype.cpp
#if defined(ARROW_R_WITH_ARROW)
std::shared_ptr<arrow::DataType> Int16__initialize();
RcppExport SEXP _arrow_Int16__initialize(){
BEGIN_RCPP
	return Rcpp::wrap(Int16__initialize());
END_RCPP
}
#else
RcppExport SEXP _arrow_Int16__initialize(){
	Rf_error("Cannot call Int16__initialize(). Please use arrow::install_arrow() to install required runtime libraries. ");
}
#endif

// datatype.cpp
#if defined(ARROW_R_WITH_ARROW)
std::shared_ptr<arrow::DataType> Int32__initialize();
RcppExport SEXP _arrow_Int32__initialize(){
BEGIN_RCPP
	return Rcpp::wrap(Int32__initialize());
END_RCPP
}
#else
RcppExport SEXP _arrow_Int32__initialize(){
	Rf_error("Cannot call Int32__initialize(). Please use arrow::install_arrow() to install required runtime libraries. ");
}
#endif

// datatype.cpp
#if defined(ARROW_R_WITH_ARROW)
std::shared_ptr<arrow::DataType> Int64__initialize();
RcppExport SEXP _arrow_Int64__initialize(){
BEGIN_RCPP
	return Rcpp::wrap(Int64__initialize());
END_RCPP
}
#else
RcppExport SEXP _arrow_Int64__initialize(){
	Rf_error("Cannot call Int64__initialize(). Please use arrow::install_arrow() to install required runtime libraries. ");
}
#endif

// datatype.cpp
#if defined(ARROW_R_WITH_ARROW)
std::shared_ptr<arrow::DataType> UInt8__initialize();
RcppExport SEXP _arrow_UInt8__initialize(){
BEGIN_RCPP
	return Rcpp::wrap(UInt8__initialize());
END_RCPP
}
#else
RcppExport SEXP _arrow_UInt8__initialize(){
	Rf_error("Cannot call UInt8__initialize(). Please use arrow::install_arrow() to install required runtime libraries. ");
}
#endif

// datatype.cpp
#if defined(ARROW_R_WITH_ARROW)
std::shared_ptr<arrow::DataType> UInt16__initialize();
RcppExport SEXP _arrow_UInt16__initialize(){
BEGIN_RCPP
	return Rcpp::wrap(UInt16__initialize());
END_RCPP
}
#else
RcppExport SEXP _arrow_UInt16__initialize(){
	Rf_error("Cannot call UInt16__initialize(). Please use arrow::install_arrow() to install required runtime libraries. ");
}
#endif

// datatype.cpp
#if defined(ARROW_R_WITH_ARROW)
std::shared_ptr<arrow::DataType> UInt32__initialize();
RcppExport SEXP _arrow_UInt32__initialize(){
BEGIN_RCPP
	return Rcpp::wrap(UInt32__initialize());
END_RCPP
}
#else
RcppExport SEXP _arrow_UInt32__initialize(){
	Rf_error("Cannot call UInt32__initialize(). Please use arrow::install_arrow() to install required runtime libraries. ");
}
#endif

// datatype.cpp
#if defined(ARROW_R_WITH_ARROW)
std::shared_ptr<arrow::DataType> UInt64__initialize();
RcppExport SEXP _arrow_UInt64__initialize(){
BEGIN_RCPP
	return Rcpp::wrap(UInt64__initialize());
END_RCPP
}
#else
RcppExport SEXP _arrow_UInt64__initialize(){
	Rf_error("Cannot call UInt64__initialize(). Please use arrow::install_arrow() to install required runtime libraries. ");
}
#endif

// datatype.cpp
#if defined(ARROW_R_WITH_ARROW)
std::shared_ptr<arrow::DataType> Float16__initialize();
RcppExport SEXP _arrow_Float16__initialize(){
BEGIN_RCPP
	return Rcpp::wrap(Float16__initialize());
END_RCPP
}
#else
RcppExport SEXP _arrow_Float16__initialize(){
	Rf_error("Cannot call Float16__initialize(). Please use arrow::install_arrow() to install required runtime libraries. ");
}
#endif

// datatype.cpp
#if defined(ARROW_R_WITH_ARROW)
std::shared_ptr<arrow::DataType> Float32__initialize();
RcppExport SEXP _arrow_Float32__initialize(){
BEGIN_RCPP
	return Rcpp::wrap(Float32__initialize());
END_RCPP
}
#else
RcppExport SEXP _arrow_Float32__initialize(){
	Rf_error("Cannot call Float32__initialize(). Please use arrow::install_arrow() to install required runtime libraries. ");
}
#endif

// datatype.cpp
#if defined(ARROW_R_WITH_ARROW)
std::shared_ptr<arrow::DataType> Float64__initialize();
RcppExport SEXP _arrow_Float64__initialize(){
BEGIN_RCPP
	return Rcpp::wrap(Float64__initialize());
END_RCPP
}
#else
RcppExport SEXP _arrow_Float64__initialize(){
	Rf_error("Cannot call Float64__initialize(). Please use arrow::install_arrow() to install required runtime libraries. ");
}
#endif

// datatype.cpp
#if defined(ARROW_R_WITH_ARROW)
std::shared_ptr<arrow::DataType> Boolean__initialize();
RcppExport SEXP _arrow_Boolean__initialize(){
BEGIN_RCPP
	return Rcpp::wrap(Boolean__initialize());
END_RCPP
}
#else
RcppExport SEXP _arrow_Boolean__initialize(){
	Rf_error("Cannot call Boolean__initialize(). Please use arrow::install_arrow() to install required runtime libraries. ");
}
#endif

// datatype.cpp
#if defined(ARROW_R_WITH_ARROW)
std::shared_ptr<arrow::DataType> Utf8__initialize();
RcppExport SEXP _arrow_Utf8__initialize(){
BEGIN_RCPP
	return Rcpp::wrap(Utf8__initialize());
END_RCPP
}
#else
RcppExport SEXP _arrow_Utf8__initialize(){
	Rf_error("Cannot call Utf8__initialize(). Please use arrow::install_arrow() to install required runtime libraries. ");
}
#endif

// datatype.cpp
#if defined(ARROW_R_WITH_ARROW)
std::shared_ptr<arrow::DataType> Date32__initialize();
RcppExport SEXP _arrow_Date32__initialize(){
BEGIN_RCPP
	return Rcpp::wrap(Date32__initialize());
END_RCPP
}
#else
RcppExport SEXP _arrow_Date32__initialize(){
	Rf_error("Cannot call Date32__initialize(). Please use arrow::install_arrow() to install required runtime libraries. ");
}
#endif

// datatype.cpp
#if defined(ARROW_R_WITH_ARROW)
std::shared_ptr<arrow::DataType> Date64__initialize();
RcppExport SEXP _arrow_Date64__initialize(){
BEGIN_RCPP
	return Rcpp::wrap(Date64__initialize());
END_RCPP
}
#else
RcppExport SEXP _arrow_Date64__initialize(){
	Rf_error("Cannot call Date64__initialize(). Please use arrow::install_arrow() to install required runtime libraries. ");
}
#endif

// datatype.cpp
#if defined(ARROW_R_WITH_ARROW)
std::shared_ptr<arrow::DataType> Null__initialize();
RcppExport SEXP _arrow_Null__initialize(){
BEGIN_RCPP
	return Rcpp::wrap(Null__initialize());
END_RCPP
}
#else
RcppExport SEXP _arrow_Null__initialize(){
	Rf_error("Cannot call Null__initialize(). Please use arrow::install_arrow() to install required runtime libraries. ");
}
#endif

// datatype.cpp
#if defined(ARROW_R_WITH_ARROW)
std::shared_ptr<arrow::DataType> Decimal128Type__initialize(int32_t precision, int32_t scale);
RcppExport SEXP _arrow_Decimal128Type__initialize(SEXP precision_sexp, SEXP scale_sexp){
BEGIN_RCPP
	Rcpp::traits::input_parameter<int32_t>::type precision(precision_sexp);
	Rcpp::traits::input_parameter<int32_t>::type scale(scale_sexp);
	return Rcpp::wrap(Decimal128Type__initialize(precision, scale));
END_RCPP
}
#else
RcppExport SEXP _arrow_Decimal128Type__initialize(SEXP precision_sexp, SEXP scale_sexp){
	Rf_error("Cannot call Decimal128Type__initialize(). Please use arrow::install_arrow() to install required runtime libraries. ");
}
#endif

// datatype.cpp
#if defined(ARROW_R_WITH_ARROW)
std::shared_ptr<arrow::DataType> FixedSizeBinary__initialize(int32_t byte_width);
RcppExport SEXP _arrow_FixedSizeBinary__initialize(SEXP byte_width_sexp){
BEGIN_RCPP
	Rcpp::traits::input_parameter<int32_t>::type byte_width(byte_width_sexp);
	return Rcpp::wrap(FixedSizeBinary__initialize(byte_width));
END_RCPP
}
#else
RcppExport SEXP _arrow_FixedSizeBinary__initialize(SEXP byte_width_sexp){
	Rf_error("Cannot call FixedSizeBinary__initialize(). Please use arrow::install_arrow() to install required runtime libraries. ");
}
#endif

// datatype.cpp
#if defined(ARROW_R_WITH_ARROW)
std::shared_ptr<arrow::DataType> Timestamp__initialize1(arrow::TimeUnit::type unit);
RcppExport SEXP _arrow_Timestamp__initialize1(SEXP unit_sexp){
BEGIN_RCPP
	Rcpp::traits::input_parameter<arrow::TimeUnit::type>::type unit(unit_sexp);
	return Rcpp::wrap(Timestamp__initialize1(unit));
END_RCPP
}
#else
RcppExport SEXP _arrow_Timestamp__initialize1(SEXP unit_sexp){
	Rf_error("Cannot call Timestamp__initialize1(). Please use arrow::install_arrow() to install required runtime libraries. ");
}
#endif

// datatype.cpp
#if defined(ARROW_R_WITH_ARROW)
std::shared_ptr<arrow::DataType> Timestamp__initialize2(arrow::TimeUnit::type unit, const std::string& timezone);
RcppExport SEXP _arrow_Timestamp__initialize2(SEXP unit_sexp, SEXP timezone_sexp){
BEGIN_RCPP
	Rcpp::traits::input_parameter<arrow::TimeUnit::type>::type unit(unit_sexp);
	Rcpp::traits::input_parameter<const std::string&>::type timezone(timezone_sexp);
	return Rcpp::wrap(Timestamp__initialize2(unit, timezone));
END_RCPP
}
#else
RcppExport SEXP _arrow_Timestamp__initialize2(SEXP unit_sexp, SEXP timezone_sexp){
	Rf_error("Cannot call Timestamp__initialize2(). Please use arrow::install_arrow() to install required runtime libraries. ");
}
#endif

// datatype.cpp
#if defined(ARROW_R_WITH_ARROW)
std::shared_ptr<arrow::DataType> Time32__initialize(arrow::TimeUnit::type unit);
RcppExport SEXP _arrow_Time32__initialize(SEXP unit_sexp){
BEGIN_RCPP
	Rcpp::traits::input_parameter<arrow::TimeUnit::type>::type unit(unit_sexp);
	return Rcpp::wrap(Time32__initialize(unit));
END_RCPP
}
#else
RcppExport SEXP _arrow_Time32__initialize(SEXP unit_sexp){
	Rf_error("Cannot call Time32__initialize(). Please use arrow::install_arrow() to install required runtime libraries. ");
}
#endif

// datatype.cpp
#if defined(ARROW_R_WITH_ARROW)
std::shared_ptr<arrow::DataType> Time64__initialize(arrow::TimeUnit::type unit);
RcppExport SEXP _arrow_Time64__initialize(SEXP unit_sexp){
BEGIN_RCPP
	Rcpp::traits::input_parameter<arrow::TimeUnit::type>::type unit(unit_sexp);
	return Rcpp::wrap(Time64__initialize(unit));
END_RCPP
}
#else
RcppExport SEXP _arrow_Time64__initialize(SEXP unit_sexp){
	Rf_error("Cannot call Time64__initialize(). Please use arrow::install_arrow() to install required runtime libraries. ");
}
#endif

// datatype.cpp
#if defined(ARROW_R_WITH_ARROW)
SEXP list__(SEXP x);
RcppExport SEXP _arrow_list__(SEXP x_sexp){
BEGIN_RCPP
	Rcpp::traits::input_parameter<SEXP>::type x(x_sexp);
	return Rcpp::wrap(list__(x));
END_RCPP
}
#else
RcppExport SEXP _arrow_list__(SEXP x_sexp){
	Rf_error("Cannot call list__(). Please use arrow::install_arrow() to install required runtime libraries. ");
}
#endif

// datatype.cpp
#if defined(ARROW_R_WITH_ARROW)
std::shared_ptr<arrow::DataType> struct_(List fields);
RcppExport SEXP _arrow_struct_(SEXP fields_sexp){
BEGIN_RCPP
	Rcpp::traits::input_parameter<List>::type fields(fields_sexp);
	return Rcpp::wrap(struct_(fields));
END_RCPP
}
#else
RcppExport SEXP _arrow_struct_(SEXP fields_sexp){
	Rf_error("Cannot call struct_(). Please use arrow::install_arrow() to install required runtime libraries. ");
}
#endif

// datatype.cpp
#if defined(ARROW_R_WITH_ARROW)
std::string DataType__ToString(const std::shared_ptr<arrow::DataType>& type);
RcppExport SEXP _arrow_DataType__ToString(SEXP type_sexp){
BEGIN_RCPP
	Rcpp::traits::input_parameter<const std::shared_ptr<arrow::DataType>&>::type type(type_sexp);
	return Rcpp::wrap(DataType__ToString(type));
END_RCPP
}
#else
RcppExport SEXP _arrow_DataType__ToString(SEXP type_sexp){
	Rf_error("Cannot call DataType__ToString(). Please use arrow::install_arrow() to install required runtime libraries. ");
}
#endif

// datatype.cpp
#if defined(ARROW_R_WITH_ARROW)
std::string DataType__name(const std::shared_ptr<arrow::DataType>& type);
RcppExport SEXP _arrow_DataType__name(SEXP type_sexp){
BEGIN_RCPP
	Rcpp::traits::input_parameter<const std::shared_ptr<arrow::DataType>&>::type type(type_sexp);
	return Rcpp::wrap(DataType__name(type));
END_RCPP
}
#else
RcppExport SEXP _arrow_DataType__name(SEXP type_sexp){
	Rf_error("Cannot call DataType__name(). Please use arrow::install_arrow() to install required runtime libraries. ");
}
#endif

// datatype.cpp
#if defined(ARROW_R_WITH_ARROW)
bool DataType__Equals(const std::shared_ptr<arrow::DataType>& lhs, const std::shared_ptr<arrow::DataType>& rhs);
RcppExport SEXP _arrow_DataType__Equals(SEXP lhs_sexp, SEXP rhs_sexp){
BEGIN_RCPP
	Rcpp::traits::input_parameter<const std::shared_ptr<arrow::DataType>&>::type lhs(lhs_sexp);
	Rcpp::traits::input_parameter<const std::shared_ptr<arrow::DataType>&>::type rhs(rhs_sexp);
	return Rcpp::wrap(DataType__Equals(lhs, rhs));
END_RCPP
}
#else
RcppExport SEXP _arrow_DataType__Equals(SEXP lhs_sexp, SEXP rhs_sexp){
	Rf_error("Cannot call DataType__Equals(). Please use arrow::install_arrow() to install required runtime libraries. ");
}
#endif

// datatype.cpp
#if defined(ARROW_R_WITH_ARROW)
int DataType__num_children(const std::shared_ptr<arrow::DataType>& type);
RcppExport SEXP _arrow_DataType__num_children(SEXP type_sexp){
BEGIN_RCPP
	Rcpp::traits::input_parameter<const std::shared_ptr<arrow::DataType>&>::type type(type_sexp);
	return Rcpp::wrap(DataType__num_children(type));
END_RCPP
}
#else
RcppExport SEXP _arrow_DataType__num_children(SEXP type_sexp){
	Rf_error("Cannot call DataType__num_children(). Please use arrow::install_arrow() to install required runtime libraries. ");
}
#endif

// datatype.cpp
#if defined(ARROW_R_WITH_ARROW)
List DataType__children_pointer(const std::shared_ptr<arrow::DataType>& type);
RcppExport SEXP _arrow_DataType__children_pointer(SEXP type_sexp){
BEGIN_RCPP
	Rcpp::traits::input_parameter<const std::shared_ptr<arrow::DataType>&>::type type(type_sexp);
	return Rcpp::wrap(DataType__children_pointer(type));
END_RCPP
}
#else
RcppExport SEXP _arrow_DataType__children_pointer(SEXP type_sexp){
	Rf_error("Cannot call DataType__children_pointer(). Please use arrow::install_arrow() to install required runtime libraries. ");
}
#endif

// datatype.cpp
#if defined(ARROW_R_WITH_ARROW)
arrow::Type::type DataType__id(const std::shared_ptr<arrow::DataType>& type);
RcppExport SEXP _arrow_DataType__id(SEXP type_sexp){
BEGIN_RCPP
	Rcpp::traits::input_parameter<const std::shared_ptr<arrow::DataType>&>::type type(type_sexp);
	return Rcpp::wrap(DataType__id(type));
END_RCPP
}
#else
RcppExport SEXP _arrow_DataType__id(SEXP type_sexp){
	Rf_error("Cannot call DataType__id(). Please use arrow::install_arrow() to install required runtime libraries. ");
}
#endif

// datatype.cpp
#if defined(ARROW_R_WITH_ARROW)
std::string ListType__ToString(const std::shared_ptr<arrow::ListType>& type);
RcppExport SEXP _arrow_ListType__ToString(SEXP type_sexp){
BEGIN_RCPP
	Rcpp::traits::input_parameter<const std::shared_ptr<arrow::ListType>&>::type type(type_sexp);
	return Rcpp::wrap(ListType__ToString(type));
END_RCPP
}
#else
RcppExport SEXP _arrow_ListType__ToString(SEXP type_sexp){
	Rf_error("Cannot call ListType__ToString(). Please use arrow::install_arrow() to install required runtime libraries. ");
}
#endif

// datatype.cpp
#if defined(ARROW_R_WITH_ARROW)
int FixedWidthType__bit_width(const std::shared_ptr<arrow::FixedWidthType>& type);
RcppExport SEXP _arrow_FixedWidthType__bit_width(SEXP type_sexp){
BEGIN_RCPP
	Rcpp::traits::input_parameter<const std::shared_ptr<arrow::FixedWidthType>&>::type type(type_sexp);
	return Rcpp::wrap(FixedWidthType__bit_width(type));
END_RCPP
}
#else
RcppExport SEXP _arrow_FixedWidthType__bit_width(SEXP type_sexp){
	Rf_error("Cannot call FixedWidthType__bit_width(). Please use arrow::install_arrow() to install required runtime libraries. ");
}
#endif

// datatype.cpp
#if defined(ARROW_R_WITH_ARROW)
arrow::DateUnit DateType__unit(const std::shared_ptr<arrow::DateType>& type);
RcppExport SEXP _arrow_DateType__unit(SEXP type_sexp){
BEGIN_RCPP
	Rcpp::traits::input_parameter<const std::shared_ptr<arrow::DateType>&>::type type(type_sexp);
	return Rcpp::wrap(DateType__unit(type));
END_RCPP
}
#else
RcppExport SEXP _arrow_DateType__unit(SEXP type_sexp){
	Rf_error("Cannot call DateType__unit(). Please use arrow::install_arrow() to install required runtime libraries. ");
}
#endif

// datatype.cpp
#if defined(ARROW_R_WITH_ARROW)
arrow::TimeUnit::type TimeType__unit(const std::shared_ptr<arrow::TimeType>& type);
RcppExport SEXP _arrow_TimeType__unit(SEXP type_sexp){
BEGIN_RCPP
	Rcpp::traits::input_parameter<const std::shared_ptr<arrow::TimeType>&>::type type(type_sexp);
	return Rcpp::wrap(TimeType__unit(type));
END_RCPP
}
#else
RcppExport SEXP _arrow_TimeType__unit(SEXP type_sexp){
	Rf_error("Cannot call TimeType__unit(). Please use arrow::install_arrow() to install required runtime libraries. ");
}
#endif

// datatype.cpp
#if defined(ARROW_R_WITH_ARROW)
int32_t DecimalType__precision(const std::shared_ptr<arrow::DecimalType>& type);
RcppExport SEXP _arrow_DecimalType__precision(SEXP type_sexp){
BEGIN_RCPP
	Rcpp::traits::input_parameter<const std::shared_ptr<arrow::DecimalType>&>::type type(type_sexp);
	return Rcpp::wrap(DecimalType__precision(type));
END_RCPP
}
#else
RcppExport SEXP _arrow_DecimalType__precision(SEXP type_sexp){
	Rf_error("Cannot call DecimalType__precision(). Please use arrow::install_arrow() to install required runtime libraries. ");
}
#endif

// datatype.cpp
#if defined(ARROW_R_WITH_ARROW)
int32_t DecimalType__scale(const std::shared_ptr<arrow::DecimalType>& type);
RcppExport SEXP _arrow_DecimalType__scale(SEXP type_sexp){
BEGIN_RCPP
	Rcpp::traits::input_parameter<const std::shared_ptr<arrow::DecimalType>&>::type type(type_sexp);
	return Rcpp::wrap(DecimalType__scale(type));
END_RCPP
}
#else
RcppExport SEXP _arrow_DecimalType__scale(SEXP type_sexp){
	Rf_error("Cannot call DecimalType__scale(). Please use arrow::install_arrow() to install required runtime libraries. ");
}
#endif

// datatype.cpp
#if defined(ARROW_R_WITH_ARROW)
std::string TimestampType__timezone(const std::shared_ptr<arrow::TimestampType>& type);
RcppExport SEXP _arrow_TimestampType__timezone(SEXP type_sexp){
BEGIN_RCPP
	Rcpp::traits::input_parameter<const std::shared_ptr<arrow::TimestampType>&>::type type(type_sexp);
	return Rcpp::wrap(TimestampType__timezone(type));
END_RCPP
}
#else
RcppExport SEXP _arrow_TimestampType__timezone(SEXP type_sexp){
	Rf_error("Cannot call TimestampType__timezone(). Please use arrow::install_arrow() to install required runtime libraries. ");
}
#endif

// datatype.cpp
#if defined(ARROW_R_WITH_ARROW)
arrow::TimeUnit::type TimestampType__unit(const std::shared_ptr<arrow::TimestampType>& type);
RcppExport SEXP _arrow_TimestampType__unit(SEXP type_sexp){
BEGIN_RCPP
	Rcpp::traits::input_parameter<const std::shared_ptr<arrow::TimestampType>&>::type type(type_sexp);
	return Rcpp::wrap(TimestampType__unit(type));
END_RCPP
}
#else
RcppExport SEXP _arrow_TimestampType__unit(SEXP type_sexp){
	Rf_error("Cannot call TimestampType__unit(). Please use arrow::install_arrow() to install required runtime libraries. ");
}
#endif

// datatype.cpp
#if defined(ARROW_R_WITH_ARROW)
std::shared_ptr<arrow::DataType> DictionaryType__initialize(const std::shared_ptr<arrow::DataType>& index_type, const std::shared_ptr<arrow::DataType>& value_type, bool ordered);
RcppExport SEXP _arrow_DictionaryType__initialize(SEXP index_type_sexp, SEXP value_type_sexp, SEXP ordered_sexp){
BEGIN_RCPP
	Rcpp::traits::input_parameter<const std::shared_ptr<arrow::DataType>&>::type index_type(index_type_sexp);
	Rcpp::traits::input_parameter<const std::shared_ptr<arrow::DataType>&>::type value_type(value_type_sexp);
	Rcpp::traits::input_parameter<bool>::type ordered(ordered_sexp);
	return Rcpp::wrap(DictionaryType__initialize(index_type, value_type, ordered));
END_RCPP
}
#else
RcppExport SEXP _arrow_DictionaryType__initialize(SEXP index_type_sexp, SEXP value_type_sexp, SEXP ordered_sexp){
	Rf_error("Cannot call DictionaryType__initialize(). Please use arrow::install_arrow() to install required runtime libraries. ");
}
#endif

// datatype.cpp
#if defined(ARROW_R_WITH_ARROW)
std::shared_ptr<arrow::DataType> DictionaryType__index_type(const std::shared_ptr<arrow::DictionaryType>& type);
RcppExport SEXP _arrow_DictionaryType__index_type(SEXP type_sexp){
BEGIN_RCPP
	Rcpp::traits::input_parameter<const std::shared_ptr<arrow::DictionaryType>&>::type type(type_sexp);
	return Rcpp::wrap(DictionaryType__index_type(type));
END_RCPP
}
#else
RcppExport SEXP _arrow_DictionaryType__index_type(SEXP type_sexp){
	Rf_error("Cannot call DictionaryType__index_type(). Please use arrow::install_arrow() to install required runtime libraries. ");
}
#endif

// datatype.cpp
#if defined(ARROW_R_WITH_ARROW)
std::shared_ptr<arrow::DataType> DictionaryType__value_type(const std::shared_ptr<arrow::DictionaryType>& type);
RcppExport SEXP _arrow_DictionaryType__value_type(SEXP type_sexp){
BEGIN_RCPP
	Rcpp::traits::input_parameter<const std::shared_ptr<arrow::DictionaryType>&>::type type(type_sexp);
	return Rcpp::wrap(DictionaryType__value_type(type));
END_RCPP
}
#else
RcppExport SEXP _arrow_DictionaryType__value_type(SEXP type_sexp){
	Rf_error("Cannot call DictionaryType__value_type(). Please use arrow::install_arrow() to install required runtime libraries. ");
}
#endif

// datatype.cpp
#if defined(ARROW_R_WITH_ARROW)
std::string DictionaryType__name(const std::shared_ptr<arrow::DictionaryType>& type);
RcppExport SEXP _arrow_DictionaryType__name(SEXP type_sexp){
BEGIN_RCPP
	Rcpp::traits::input_parameter<const std::shared_ptr<arrow::DictionaryType>&>::type type(type_sexp);
	return Rcpp::wrap(DictionaryType__name(type));
END_RCPP
}
#else
RcppExport SEXP _arrow_DictionaryType__name(SEXP type_sexp){
	Rf_error("Cannot call DictionaryType__name(). Please use arrow::install_arrow() to install required runtime libraries. ");
}
#endif

// datatype.cpp
#if defined(ARROW_R_WITH_ARROW)
bool DictionaryType__ordered(const std::shared_ptr<arrow::DictionaryType>& type);
RcppExport SEXP _arrow_DictionaryType__ordered(SEXP type_sexp){
BEGIN_RCPP
	Rcpp::traits::input_parameter<const std::shared_ptr<arrow::DictionaryType>&>::type type(type_sexp);
	return Rcpp::wrap(DictionaryType__ordered(type));
END_RCPP
}
#else
RcppExport SEXP _arrow_DictionaryType__ordered(SEXP type_sexp){
	Rf_error("Cannot call DictionaryType__ordered(). Please use arrow::install_arrow() to install required runtime libraries. ");
}
#endif

// datatype.cpp
#if defined(ARROW_R_WITH_ARROW)
std::shared_ptr<arrow::Field> StructType__GetFieldByName(const std::shared_ptr<arrow::StructType>& type, const std::string& name);
RcppExport SEXP _arrow_StructType__GetFieldByName(SEXP type_sexp, SEXP name_sexp){
BEGIN_RCPP
	Rcpp::traits::input_parameter<const std::shared_ptr<arrow::StructType>&>::type type(type_sexp);
	Rcpp::traits::input_parameter<const std::string&>::type name(name_sexp);
	return Rcpp::wrap(StructType__GetFieldByName(type, name));
END_RCPP
}
#else
RcppExport SEXP _arrow_StructType__GetFieldByName(SEXP type_sexp, SEXP name_sexp){
	Rf_error("Cannot call StructType__GetFieldByName(). Please use arrow::install_arrow() to install required runtime libraries. ");
}
#endif

// datatype.cpp
#if defined(ARROW_R_WITH_ARROW)
int StructType__GetFieldIndex(const std::shared_ptr<arrow::StructType>& type, const std::string& name);
RcppExport SEXP _arrow_StructType__GetFieldIndex(SEXP type_sexp, SEXP name_sexp){
BEGIN_RCPP
	Rcpp::traits::input_parameter<const std::shared_ptr<arrow::StructType>&>::type type(type_sexp);
	Rcpp::traits::input_parameter<const std::string&>::type name(name_sexp);
	return Rcpp::wrap(StructType__GetFieldIndex(type, name));
END_RCPP
}
#else
RcppExport SEXP _arrow_StructType__GetFieldIndex(SEXP type_sexp, SEXP name_sexp){
	Rf_error("Cannot call StructType__GetFieldIndex(). Please use arrow::install_arrow() to install required runtime libraries. ");
}
#endif

// datatype.cpp
#if defined(ARROW_R_WITH_ARROW)
std::shared_ptr<arrow::Field> ListType__value_field(const std::shared_ptr<arrow::ListType>& type);
RcppExport SEXP _arrow_ListType__value_field(SEXP type_sexp){
BEGIN_RCPP
	Rcpp::traits::input_parameter<const std::shared_ptr<arrow::ListType>&>::type type(type_sexp);
	return Rcpp::wrap(ListType__value_field(type));
END_RCPP
}
#else
RcppExport SEXP _arrow_ListType__value_field(SEXP type_sexp){
	Rf_error("Cannot call ListType__value_field(). Please use arrow::install_arrow() to install required runtime libraries. ");
}
#endif

// datatype.cpp
#if defined(ARROW_R_WITH_ARROW)
std::shared_ptr<arrow::DataType> ListType__value_type(const std::shared_ptr<arrow::ListType>& type);
RcppExport SEXP _arrow_ListType__value_type(SEXP type_sexp){
BEGIN_RCPP
	Rcpp::traits::input_parameter<const std::shared_ptr<arrow::ListType>&>::type type(type_sexp);
	return Rcpp::wrap(ListType__value_type(type));
END_RCPP
}
#else
RcppExport SEXP _arrow_ListType__value_type(SEXP type_sexp){
	Rf_error("Cannot call ListType__value_type(). Please use arrow::install_arrow() to install required runtime libraries. ");
}
#endif

// feather.cpp
#if defined(ARROW_R_WITH_ARROW)
void ipc___feather___TableWriter__SetDescription(const std::unique_ptr<arrow::ipc::feather::TableWriter>& writer, const std::string& description);
RcppExport SEXP _arrow_ipc___feather___TableWriter__SetDescription(SEXP writer_sexp, SEXP description_sexp){
BEGIN_RCPP
	Rcpp::traits::input_parameter<const std::unique_ptr<arrow::ipc::feather::TableWriter>&>::type writer(writer_sexp);
	Rcpp::traits::input_parameter<const std::string&>::type description(description_sexp);
	ipc___feather___TableWriter__SetDescription(writer, description);
	return R_NilValue;
END_RCPP
}
#else
RcppExport SEXP _arrow_ipc___feather___TableWriter__SetDescription(SEXP writer_sexp, SEXP description_sexp){
	Rf_error("Cannot call ipc___feather___TableWriter__SetDescription(). Please use arrow::install_arrow() to install required runtime libraries. ");
}
#endif

// feather.cpp
#if defined(ARROW_R_WITH_ARROW)
void ipc___feather___TableWriter__SetNumRows(const std::unique_ptr<arrow::ipc::feather::TableWriter>& writer, int64_t num_rows);
RcppExport SEXP _arrow_ipc___feather___TableWriter__SetNumRows(SEXP writer_sexp, SEXP num_rows_sexp){
BEGIN_RCPP
	Rcpp::traits::input_parameter<const std::unique_ptr<arrow::ipc::feather::TableWriter>&>::type writer(writer_sexp);
	Rcpp::traits::input_parameter<int64_t>::type num_rows(num_rows_sexp);
	ipc___feather___TableWriter__SetNumRows(writer, num_rows);
	return R_NilValue;
END_RCPP
}
#else
RcppExport SEXP _arrow_ipc___feather___TableWriter__SetNumRows(SEXP writer_sexp, SEXP num_rows_sexp){
	Rf_error("Cannot call ipc___feather___TableWriter__SetNumRows(). Please use arrow::install_arrow() to install required runtime libraries. ");
}
#endif

// feather.cpp
#if defined(ARROW_R_WITH_ARROW)
void ipc___feather___TableWriter__Append(const std::unique_ptr<arrow::ipc::feather::TableWriter>& writer, const std::string& name, const std::shared_ptr<arrow::Array>& values);
RcppExport SEXP _arrow_ipc___feather___TableWriter__Append(SEXP writer_sexp, SEXP name_sexp, SEXP values_sexp){
BEGIN_RCPP
	Rcpp::traits::input_parameter<const std::unique_ptr<arrow::ipc::feather::TableWriter>&>::type writer(writer_sexp);
	Rcpp::traits::input_parameter<const std::string&>::type name(name_sexp);
	Rcpp::traits::input_parameter<const std::shared_ptr<arrow::Array>&>::type values(values_sexp);
	ipc___feather___TableWriter__Append(writer, name, values);
	return R_NilValue;
END_RCPP
}
#else
RcppExport SEXP _arrow_ipc___feather___TableWriter__Append(SEXP writer_sexp, SEXP name_sexp, SEXP values_sexp){
	Rf_error("Cannot call ipc___feather___TableWriter__Append(). Please use arrow::install_arrow() to install required runtime libraries. ");
}
#endif

// feather.cpp
#if defined(ARROW_R_WITH_ARROW)
void ipc___feather___TableWriter__Finalize(const std::unique_ptr<arrow::ipc::feather::TableWriter>& writer);
RcppExport SEXP _arrow_ipc___feather___TableWriter__Finalize(SEXP writer_sexp){
BEGIN_RCPP
	Rcpp::traits::input_parameter<const std::unique_ptr<arrow::ipc::feather::TableWriter>&>::type writer(writer_sexp);
	ipc___feather___TableWriter__Finalize(writer);
	return R_NilValue;
END_RCPP
}
#else
RcppExport SEXP _arrow_ipc___feather___TableWriter__Finalize(SEXP writer_sexp){
	Rf_error("Cannot call ipc___feather___TableWriter__Finalize(). Please use arrow::install_arrow() to install required runtime libraries. ");
}
#endif

// feather.cpp
#if defined(ARROW_R_WITH_ARROW)
std::unique_ptr<arrow::ipc::feather::TableWriter> ipc___feather___TableWriter__Open(const std::shared_ptr<arrow::io::OutputStream>& stream);
RcppExport SEXP _arrow_ipc___feather___TableWriter__Open(SEXP stream_sexp){
BEGIN_RCPP
	Rcpp::traits::input_parameter<const std::shared_ptr<arrow::io::OutputStream>&>::type stream(stream_sexp);
	return Rcpp::wrap(ipc___feather___TableWriter__Open(stream));
END_RCPP
}
#else
RcppExport SEXP _arrow_ipc___feather___TableWriter__Open(SEXP stream_sexp){
	Rf_error("Cannot call ipc___feather___TableWriter__Open(). Please use arrow::install_arrow() to install required runtime libraries. ");
}
#endif

// feather.cpp
#if defined(ARROW_R_WITH_ARROW)
void ipc___TableWriter__RecordBatch__WriteFeather(const std::unique_ptr<arrow::ipc::feather::TableWriter>& writer, const std::shared_ptr<arrow::RecordBatch>& batch);
RcppExport SEXP _arrow_ipc___TableWriter__RecordBatch__WriteFeather(SEXP writer_sexp, SEXP batch_sexp){
BEGIN_RCPP
	Rcpp::traits::input_parameter<const std::unique_ptr<arrow::ipc::feather::TableWriter>&>::type writer(writer_sexp);
	Rcpp::traits::input_parameter<const std::shared_ptr<arrow::RecordBatch>&>::type batch(batch_sexp);
	ipc___TableWriter__RecordBatch__WriteFeather(writer, batch);
	return R_NilValue;
END_RCPP
}
#else
RcppExport SEXP _arrow_ipc___TableWriter__RecordBatch__WriteFeather(SEXP writer_sexp, SEXP batch_sexp){
	Rf_error("Cannot call ipc___TableWriter__RecordBatch__WriteFeather(). Please use arrow::install_arrow() to install required runtime libraries. ");
}
#endif

// feather.cpp
#if defined(ARROW_R_WITH_ARROW)
std::string ipc___feather___TableReader__GetDescription(const std::unique_ptr<arrow::ipc::feather::TableReader>& reader);
RcppExport SEXP _arrow_ipc___feather___TableReader__GetDescription(SEXP reader_sexp){
BEGIN_RCPP
	Rcpp::traits::input_parameter<const std::unique_ptr<arrow::ipc::feather::TableReader>&>::type reader(reader_sexp);
	return Rcpp::wrap(ipc___feather___TableReader__GetDescription(reader));
END_RCPP
}
#else
RcppExport SEXP _arrow_ipc___feather___TableReader__GetDescription(SEXP reader_sexp){
	Rf_error("Cannot call ipc___feather___TableReader__GetDescription(). Please use arrow::install_arrow() to install required runtime libraries. ");
}
#endif

// feather.cpp
#if defined(ARROW_R_WITH_ARROW)
bool ipc___feather___TableReader__HasDescription(const std::unique_ptr<arrow::ipc::feather::TableReader>& reader);
RcppExport SEXP _arrow_ipc___feather___TableReader__HasDescription(SEXP reader_sexp){
BEGIN_RCPP
	Rcpp::traits::input_parameter<const std::unique_ptr<arrow::ipc::feather::TableReader>&>::type reader(reader_sexp);
	return Rcpp::wrap(ipc___feather___TableReader__HasDescription(reader));
END_RCPP
}
#else
RcppExport SEXP _arrow_ipc___feather___TableReader__HasDescription(SEXP reader_sexp){
	Rf_error("Cannot call ipc___feather___TableReader__HasDescription(). Please use arrow::install_arrow() to install required runtime libraries. ");
}
#endif

// feather.cpp
#if defined(ARROW_R_WITH_ARROW)
int ipc___feather___TableReader__version(const std::unique_ptr<arrow::ipc::feather::TableReader>& reader);
RcppExport SEXP _arrow_ipc___feather___TableReader__version(SEXP reader_sexp){
BEGIN_RCPP
	Rcpp::traits::input_parameter<const std::unique_ptr<arrow::ipc::feather::TableReader>&>::type reader(reader_sexp);
	return Rcpp::wrap(ipc___feather___TableReader__version(reader));
END_RCPP
}
#else
RcppExport SEXP _arrow_ipc___feather___TableReader__version(SEXP reader_sexp){
	Rf_error("Cannot call ipc___feather___TableReader__version(). Please use arrow::install_arrow() to install required runtime libraries. ");
}
#endif

// feather.cpp
#if defined(ARROW_R_WITH_ARROW)
int64_t ipc___feather___TableReader__num_rows(const std::unique_ptr<arrow::ipc::feather::TableReader>& reader);
RcppExport SEXP _arrow_ipc___feather___TableReader__num_rows(SEXP reader_sexp){
BEGIN_RCPP
	Rcpp::traits::input_parameter<const std::unique_ptr<arrow::ipc::feather::TableReader>&>::type reader(reader_sexp);
	return Rcpp::wrap(ipc___feather___TableReader__num_rows(reader));
END_RCPP
}
#else
RcppExport SEXP _arrow_ipc___feather___TableReader__num_rows(SEXP reader_sexp){
	Rf_error("Cannot call ipc___feather___TableReader__num_rows(). Please use arrow::install_arrow() to install required runtime libraries. ");
}
#endif

// feather.cpp
#if defined(ARROW_R_WITH_ARROW)
int64_t ipc___feather___TableReader__num_columns(const std::unique_ptr<arrow::ipc::feather::TableReader>& reader);
RcppExport SEXP _arrow_ipc___feather___TableReader__num_columns(SEXP reader_sexp){
BEGIN_RCPP
	Rcpp::traits::input_parameter<const std::unique_ptr<arrow::ipc::feather::TableReader>&>::type reader(reader_sexp);
	return Rcpp::wrap(ipc___feather___TableReader__num_columns(reader));
END_RCPP
}
#else
RcppExport SEXP _arrow_ipc___feather___TableReader__num_columns(SEXP reader_sexp){
	Rf_error("Cannot call ipc___feather___TableReader__num_columns(). Please use arrow::install_arrow() to install required runtime libraries. ");
}
#endif

// feather.cpp
#if defined(ARROW_R_WITH_ARROW)
std::string ipc___feather___TableReader__GetColumnName(const std::unique_ptr<arrow::ipc::feather::TableReader>& reader, int i);
RcppExport SEXP _arrow_ipc___feather___TableReader__GetColumnName(SEXP reader_sexp, SEXP i_sexp){
BEGIN_RCPP
	Rcpp::traits::input_parameter<const std::unique_ptr<arrow::ipc::feather::TableReader>&>::type reader(reader_sexp);
	Rcpp::traits::input_parameter<int>::type i(i_sexp);
	return Rcpp::wrap(ipc___feather___TableReader__GetColumnName(reader, i));
END_RCPP
}
#else
RcppExport SEXP _arrow_ipc___feather___TableReader__GetColumnName(SEXP reader_sexp, SEXP i_sexp){
	Rf_error("Cannot call ipc___feather___TableReader__GetColumnName(). Please use arrow::install_arrow() to install required runtime libraries. ");
}
#endif

// feather.cpp
#if defined(ARROW_R_WITH_ARROW)
std::shared_ptr<arrow::Column> ipc___feather___TableReader__GetColumn(const std::unique_ptr<arrow::ipc::feather::TableReader>& reader, int i);
RcppExport SEXP _arrow_ipc___feather___TableReader__GetColumn(SEXP reader_sexp, SEXP i_sexp){
BEGIN_RCPP
	Rcpp::traits::input_parameter<const std::unique_ptr<arrow::ipc::feather::TableReader>&>::type reader(reader_sexp);
	Rcpp::traits::input_parameter<int>::type i(i_sexp);
	return Rcpp::wrap(ipc___feather___TableReader__GetColumn(reader, i));
END_RCPP
}
#else
RcppExport SEXP _arrow_ipc___feather___TableReader__GetColumn(SEXP reader_sexp, SEXP i_sexp){
	Rf_error("Cannot call ipc___feather___TableReader__GetColumn(). Please use arrow::install_arrow() to install required runtime libraries. ");
}
#endif

// feather.cpp
#if defined(ARROW_R_WITH_ARROW)
std::shared_ptr<arrow::Table> ipc___feather___TableReader__Read(const std::unique_ptr<arrow::ipc::feather::TableReader>& reader, SEXP columns);
RcppExport SEXP _arrow_ipc___feather___TableReader__Read(SEXP reader_sexp, SEXP columns_sexp){
BEGIN_RCPP
	Rcpp::traits::input_parameter<const std::unique_ptr<arrow::ipc::feather::TableReader>&>::type reader(reader_sexp);
	Rcpp::traits::input_parameter<SEXP>::type columns(columns_sexp);
	return Rcpp::wrap(ipc___feather___TableReader__Read(reader, columns));
END_RCPP
}
#else
RcppExport SEXP _arrow_ipc___feather___TableReader__Read(SEXP reader_sexp, SEXP columns_sexp){
	Rf_error("Cannot call ipc___feather___TableReader__Read(). Please use arrow::install_arrow() to install required runtime libraries. ");
}
#endif

// feather.cpp
#if defined(ARROW_R_WITH_ARROW)
std::unique_ptr<arrow::ipc::feather::TableReader> ipc___feather___TableReader__Open(const std::shared_ptr<arrow::io::RandomAccessFile>& stream);
RcppExport SEXP _arrow_ipc___feather___TableReader__Open(SEXP stream_sexp){
BEGIN_RCPP
	Rcpp::traits::input_parameter<const std::shared_ptr<arrow::io::RandomAccessFile>&>::type stream(stream_sexp);
	return Rcpp::wrap(ipc___feather___TableReader__Open(stream));
END_RCPP
}
#else
RcppExport SEXP _arrow_ipc___feather___TableReader__Open(SEXP stream_sexp){
	Rf_error("Cannot call ipc___feather___TableReader__Open(). Please use arrow::install_arrow() to install required runtime libraries. ");
}
#endif

// feather.cpp
#if defined(ARROW_R_WITH_ARROW)
Rcpp::CharacterVector ipc___feather___TableReader__column_names(const std::unique_ptr<arrow::ipc::feather::TableReader>& reader);
RcppExport SEXP _arrow_ipc___feather___TableReader__column_names(SEXP reader_sexp){
BEGIN_RCPP
	Rcpp::traits::input_parameter<const std::unique_ptr<arrow::ipc::feather::TableReader>&>::type reader(reader_sexp);
	return Rcpp::wrap(ipc___feather___TableReader__column_names(reader));
END_RCPP
}
#else
RcppExport SEXP _arrow_ipc___feather___TableReader__column_names(SEXP reader_sexp){
	Rf_error("Cannot call ipc___feather___TableReader__column_names(). Please use arrow::install_arrow() to install required runtime libraries. ");
}
#endif

// field.cpp
#if defined(ARROW_R_WITH_ARROW)
std::shared_ptr<arrow::Field> Field__initialize(const std::string& name, const std::shared_ptr<arrow::DataType>& field, bool nullable);
RcppExport SEXP _arrow_Field__initialize(SEXP name_sexp, SEXP field_sexp, SEXP nullable_sexp){
BEGIN_RCPP
	Rcpp::traits::input_parameter<const std::string&>::type name(name_sexp);
	Rcpp::traits::input_parameter<const std::shared_ptr<arrow::DataType>&>::type field(field_sexp);
	Rcpp::traits::input_parameter<bool>::type nullable(nullable_sexp);
	return Rcpp::wrap(Field__initialize(name, field, nullable));
END_RCPP
}
#else
RcppExport SEXP _arrow_Field__initialize(SEXP name_sexp, SEXP field_sexp, SEXP nullable_sexp){
	Rf_error("Cannot call Field__initialize(). Please use arrow::install_arrow() to install required runtime libraries. ");
}
#endif

// field.cpp
#if defined(ARROW_R_WITH_ARROW)
std::string Field__ToString(const std::shared_ptr<arrow::Field>& field);
RcppExport SEXP _arrow_Field__ToString(SEXP field_sexp){
BEGIN_RCPP
	Rcpp::traits::input_parameter<const std::shared_ptr<arrow::Field>&>::type field(field_sexp);
	return Rcpp::wrap(Field__ToString(field));
END_RCPP
}
#else
RcppExport SEXP _arrow_Field__ToString(SEXP field_sexp){
	Rf_error("Cannot call Field__ToString(). Please use arrow::install_arrow() to install required runtime libraries. ");
}
#endif

// field.cpp
#if defined(ARROW_R_WITH_ARROW)
std::string Field__name(const std::shared_ptr<arrow::Field>& field);
RcppExport SEXP _arrow_Field__name(SEXP field_sexp){
BEGIN_RCPP
	Rcpp::traits::input_parameter<const std::shared_ptr<arrow::Field>&>::type field(field_sexp);
	return Rcpp::wrap(Field__name(field));
END_RCPP
}
#else
RcppExport SEXP _arrow_Field__name(SEXP field_sexp){
	Rf_error("Cannot call Field__name(). Please use arrow::install_arrow() to install required runtime libraries. ");
}
#endif

// field.cpp
#if defined(ARROW_R_WITH_ARROW)
bool Field__Equals(const std::shared_ptr<arrow::Field>& field, const std::shared_ptr<arrow::Field>& other);
RcppExport SEXP _arrow_Field__Equals(SEXP field_sexp, SEXP other_sexp){
BEGIN_RCPP
	Rcpp::traits::input_parameter<const std::shared_ptr<arrow::Field>&>::type field(field_sexp);
	Rcpp::traits::input_parameter<const std::shared_ptr<arrow::Field>&>::type other(other_sexp);
	return Rcpp::wrap(Field__Equals(field, other));
END_RCPP
}
#else
RcppExport SEXP _arrow_Field__Equals(SEXP field_sexp, SEXP other_sexp){
	Rf_error("Cannot call Field__Equals(). Please use arrow::install_arrow() to install required runtime libraries. ");
}
#endif

// field.cpp
#if defined(ARROW_R_WITH_ARROW)
bool Field__nullable(const std::shared_ptr<arrow::Field>& field);
RcppExport SEXP _arrow_Field__nullable(SEXP field_sexp){
BEGIN_RCPP
	Rcpp::traits::input_parameter<const std::shared_ptr<arrow::Field>&>::type field(field_sexp);
	return Rcpp::wrap(Field__nullable(field));
END_RCPP
}
#else
RcppExport SEXP _arrow_Field__nullable(SEXP field_sexp){
	Rf_error("Cannot call Field__nullable(). Please use arrow::install_arrow() to install required runtime libraries. ");
}
#endif

// field.cpp
#if defined(ARROW_R_WITH_ARROW)
std::shared_ptr<arrow::DataType> Field__type(const std::shared_ptr<arrow::Field>& field);
RcppExport SEXP _arrow_Field__type(SEXP field_sexp){
BEGIN_RCPP
	Rcpp::traits::input_parameter<const std::shared_ptr<arrow::Field>&>::type field(field_sexp);
	return Rcpp::wrap(Field__type(field));
END_RCPP
}
#else
RcppExport SEXP _arrow_Field__type(SEXP field_sexp){
	Rf_error("Cannot call Field__type(). Please use arrow::install_arrow() to install required runtime libraries. ");
}
#endif

// io.cpp
#if defined(ARROW_R_WITH_ARROW)
std::shared_ptr<arrow::Buffer> io___Readable__Read(const std::shared_ptr<arrow::io::Readable>& x, int64_t nbytes);
RcppExport SEXP _arrow_io___Readable__Read(SEXP x_sexp, SEXP nbytes_sexp){
BEGIN_RCPP
	Rcpp::traits::input_parameter<const std::shared_ptr<arrow::io::Readable>&>::type x(x_sexp);
	Rcpp::traits::input_parameter<int64_t>::type nbytes(nbytes_sexp);
	return Rcpp::wrap(io___Readable__Read(x, nbytes));
END_RCPP
}
#else
RcppExport SEXP _arrow_io___Readable__Read(SEXP x_sexp, SEXP nbytes_sexp){
	Rf_error("Cannot call io___Readable__Read(). Please use arrow::install_arrow() to install required runtime libraries. ");
}
#endif

// io.cpp
#if defined(ARROW_R_WITH_ARROW)
void io___InputStream__Close(const std::shared_ptr<arrow::io::InputStream>& x);
RcppExport SEXP _arrow_io___InputStream__Close(SEXP x_sexp){
BEGIN_RCPP
	Rcpp::traits::input_parameter<const std::shared_ptr<arrow::io::InputStream>&>::type x(x_sexp);
	io___InputStream__Close(x);
	return R_NilValue;
END_RCPP
}
#else
RcppExport SEXP _arrow_io___InputStream__Close(SEXP x_sexp){
	Rf_error("Cannot call io___InputStream__Close(). Please use arrow::install_arrow() to install required runtime libraries. ");
}
#endif

// io.cpp
#if defined(ARROW_R_WITH_ARROW)
void io___OutputStream__Close(const std::shared_ptr<arrow::io::OutputStream>& x);
RcppExport SEXP _arrow_io___OutputStream__Close(SEXP x_sexp){
BEGIN_RCPP
	Rcpp::traits::input_parameter<const std::shared_ptr<arrow::io::OutputStream>&>::type x(x_sexp);
	io___OutputStream__Close(x);
	return R_NilValue;
END_RCPP
}
#else
RcppExport SEXP _arrow_io___OutputStream__Close(SEXP x_sexp){
	Rf_error("Cannot call io___OutputStream__Close(). Please use arrow::install_arrow() to install required runtime libraries. ");
}
#endif

// io.cpp
#if defined(ARROW_R_WITH_ARROW)
int64_t io___RandomAccessFile__GetSize(const std::shared_ptr<arrow::io::RandomAccessFile>& x);
RcppExport SEXP _arrow_io___RandomAccessFile__GetSize(SEXP x_sexp){
BEGIN_RCPP
	Rcpp::traits::input_parameter<const std::shared_ptr<arrow::io::RandomAccessFile>&>::type x(x_sexp);
	return Rcpp::wrap(io___RandomAccessFile__GetSize(x));
END_RCPP
}
#else
RcppExport SEXP _arrow_io___RandomAccessFile__GetSize(SEXP x_sexp){
	Rf_error("Cannot call io___RandomAccessFile__GetSize(). Please use arrow::install_arrow() to install required runtime libraries. ");
}
#endif

// io.cpp
#if defined(ARROW_R_WITH_ARROW)
bool io___RandomAccessFile__supports_zero_copy(const std::shared_ptr<arrow::io::RandomAccessFile>& x);
RcppExport SEXP _arrow_io___RandomAccessFile__supports_zero_copy(SEXP x_sexp){
BEGIN_RCPP
	Rcpp::traits::input_parameter<const std::shared_ptr<arrow::io::RandomAccessFile>&>::type x(x_sexp);
	return Rcpp::wrap(io___RandomAccessFile__supports_zero_copy(x));
END_RCPP
}
#else
RcppExport SEXP _arrow_io___RandomAccessFile__supports_zero_copy(SEXP x_sexp){
	Rf_error("Cannot call io___RandomAccessFile__supports_zero_copy(). Please use arrow::install_arrow() to install required runtime libraries. ");
}
#endif

// io.cpp
#if defined(ARROW_R_WITH_ARROW)
void io___RandomAccessFile__Seek(const std::shared_ptr<arrow::io::RandomAccessFile>& x, int64_t position);
RcppExport SEXP _arrow_io___RandomAccessFile__Seek(SEXP x_sexp, SEXP position_sexp){
BEGIN_RCPP
	Rcpp::traits::input_parameter<const std::shared_ptr<arrow::io::RandomAccessFile>&>::type x(x_sexp);
	Rcpp::traits::input_parameter<int64_t>::type position(position_sexp);
	io___RandomAccessFile__Seek(x, position);
	return R_NilValue;
END_RCPP
}
#else
RcppExport SEXP _arrow_io___RandomAccessFile__Seek(SEXP x_sexp, SEXP position_sexp){
	Rf_error("Cannot call io___RandomAccessFile__Seek(). Please use arrow::install_arrow() to install required runtime libraries. ");
}
#endif

// io.cpp
#if defined(ARROW_R_WITH_ARROW)
int64_t io___RandomAccessFile__Tell(const std::shared_ptr<arrow::io::RandomAccessFile>& x);
RcppExport SEXP _arrow_io___RandomAccessFile__Tell(SEXP x_sexp){
BEGIN_RCPP
	Rcpp::traits::input_parameter<const std::shared_ptr<arrow::io::RandomAccessFile>&>::type x(x_sexp);
	return Rcpp::wrap(io___RandomAccessFile__Tell(x));
END_RCPP
}
#else
RcppExport SEXP _arrow_io___RandomAccessFile__Tell(SEXP x_sexp){
	Rf_error("Cannot call io___RandomAccessFile__Tell(). Please use arrow::install_arrow() to install required runtime libraries. ");
}
#endif

// io.cpp
#if defined(ARROW_R_WITH_ARROW)
std::shared_ptr<arrow::Buffer> io___RandomAccessFile__Read0(const std::shared_ptr<arrow::io::RandomAccessFile>& x);
RcppExport SEXP _arrow_io___RandomAccessFile__Read0(SEXP x_sexp){
BEGIN_RCPP
	Rcpp::traits::input_parameter<const std::shared_ptr<arrow::io::RandomAccessFile>&>::type x(x_sexp);
	return Rcpp::wrap(io___RandomAccessFile__Read0(x));
END_RCPP
}
#else
RcppExport SEXP _arrow_io___RandomAccessFile__Read0(SEXP x_sexp){
	Rf_error("Cannot call io___RandomAccessFile__Read0(). Please use arrow::install_arrow() to install required runtime libraries. ");
}
#endif

// io.cpp
#if defined(ARROW_R_WITH_ARROW)
std::shared_ptr<arrow::Buffer> io___RandomAccessFile__ReadAt(const std::shared_ptr<arrow::io::RandomAccessFile>& x, int64_t position, int64_t nbytes);
RcppExport SEXP _arrow_io___RandomAccessFile__ReadAt(SEXP x_sexp, SEXP position_sexp, SEXP nbytes_sexp){
BEGIN_RCPP
	Rcpp::traits::input_parameter<const std::shared_ptr<arrow::io::RandomAccessFile>&>::type x(x_sexp);
	Rcpp::traits::input_parameter<int64_t>::type position(position_sexp);
	Rcpp::traits::input_parameter<int64_t>::type nbytes(nbytes_sexp);
	return Rcpp::wrap(io___RandomAccessFile__ReadAt(x, position, nbytes));
END_RCPP
}
#else
RcppExport SEXP _arrow_io___RandomAccessFile__ReadAt(SEXP x_sexp, SEXP position_sexp, SEXP nbytes_sexp){
	Rf_error("Cannot call io___RandomAccessFile__ReadAt(). Please use arrow::install_arrow() to install required runtime libraries. ");
}
#endif

// io.cpp
#if defined(ARROW_R_WITH_ARROW)
std::shared_ptr<arrow::io::MemoryMappedFile> io___MemoryMappedFile__Create(const std::string& path, int64_t size);
RcppExport SEXP _arrow_io___MemoryMappedFile__Create(SEXP path_sexp, SEXP size_sexp){
BEGIN_RCPP
	Rcpp::traits::input_parameter<const std::string&>::type path(path_sexp);
	Rcpp::traits::input_parameter<int64_t>::type size(size_sexp);
	return Rcpp::wrap(io___MemoryMappedFile__Create(path, size));
END_RCPP
}
#else
RcppExport SEXP _arrow_io___MemoryMappedFile__Create(SEXP path_sexp, SEXP size_sexp){
	Rf_error("Cannot call io___MemoryMappedFile__Create(). Please use arrow::install_arrow() to install required runtime libraries. ");
}
#endif

// io.cpp
#if defined(ARROW_R_WITH_ARROW)
std::shared_ptr<arrow::io::MemoryMappedFile> io___MemoryMappedFile__Open(const std::string& path, arrow::io::FileMode::type mode);
RcppExport SEXP _arrow_io___MemoryMappedFile__Open(SEXP path_sexp, SEXP mode_sexp){
BEGIN_RCPP
	Rcpp::traits::input_parameter<const std::string&>::type path(path_sexp);
	Rcpp::traits::input_parameter<arrow::io::FileMode::type>::type mode(mode_sexp);
	return Rcpp::wrap(io___MemoryMappedFile__Open(path, mode));
END_RCPP
}
#else
RcppExport SEXP _arrow_io___MemoryMappedFile__Open(SEXP path_sexp, SEXP mode_sexp){
	Rf_error("Cannot call io___MemoryMappedFile__Open(). Please use arrow::install_arrow() to install required runtime libraries. ");
}
#endif

// io.cpp
#if defined(ARROW_R_WITH_ARROW)
void io___MemoryMappedFile__Resize(const std::shared_ptr<arrow::io::MemoryMappedFile>& x, int64_t size);
RcppExport SEXP _arrow_io___MemoryMappedFile__Resize(SEXP x_sexp, SEXP size_sexp){
BEGIN_RCPP
	Rcpp::traits::input_parameter<const std::shared_ptr<arrow::io::MemoryMappedFile>&>::type x(x_sexp);
	Rcpp::traits::input_parameter<int64_t>::type size(size_sexp);
	io___MemoryMappedFile__Resize(x, size);
	return R_NilValue;
END_RCPP
}
#else
RcppExport SEXP _arrow_io___MemoryMappedFile__Resize(SEXP x_sexp, SEXP size_sexp){
	Rf_error("Cannot call io___MemoryMappedFile__Resize(). Please use arrow::install_arrow() to install required runtime libraries. ");
}
#endif

// io.cpp
#if defined(ARROW_R_WITH_ARROW)
std::shared_ptr<arrow::io::ReadableFile> io___ReadableFile__Open(const std::string& path);
RcppExport SEXP _arrow_io___ReadableFile__Open(SEXP path_sexp){
BEGIN_RCPP
	Rcpp::traits::input_parameter<const std::string&>::type path(path_sexp);
	return Rcpp::wrap(io___ReadableFile__Open(path));
END_RCPP
}
#else
RcppExport SEXP _arrow_io___ReadableFile__Open(SEXP path_sexp){
	Rf_error("Cannot call io___ReadableFile__Open(). Please use arrow::install_arrow() to install required runtime libraries. ");
}
#endif

// io.cpp
#if defined(ARROW_R_WITH_ARROW)
std::shared_ptr<arrow::io::BufferReader> io___BufferReader__initialize(const std::shared_ptr<arrow::Buffer>& buffer);
RcppExport SEXP _arrow_io___BufferReader__initialize(SEXP buffer_sexp){
BEGIN_RCPP
	Rcpp::traits::input_parameter<const std::shared_ptr<arrow::Buffer>&>::type buffer(buffer_sexp);
	return Rcpp::wrap(io___BufferReader__initialize(buffer));
END_RCPP
}
#else
RcppExport SEXP _arrow_io___BufferReader__initialize(SEXP buffer_sexp){
	Rf_error("Cannot call io___BufferReader__initialize(). Please use arrow::install_arrow() to install required runtime libraries. ");
}
#endif

// io.cpp
#if defined(ARROW_R_WITH_ARROW)
void io___Writable__write(const std::shared_ptr<arrow::io::Writable>& stream, const std::shared_ptr<arrow::Buffer>& buf);
RcppExport SEXP _arrow_io___Writable__write(SEXP stream_sexp, SEXP buf_sexp){
BEGIN_RCPP
	Rcpp::traits::input_parameter<const std::shared_ptr<arrow::io::Writable>&>::type stream(stream_sexp);
	Rcpp::traits::input_parameter<const std::shared_ptr<arrow::Buffer>&>::type buf(buf_sexp);
	io___Writable__write(stream, buf);
	return R_NilValue;
END_RCPP
}
#else
RcppExport SEXP _arrow_io___Writable__write(SEXP stream_sexp, SEXP buf_sexp){
	Rf_error("Cannot call io___Writable__write(). Please use arrow::install_arrow() to install required runtime libraries. ");
}
#endif

// io.cpp
#if defined(ARROW_R_WITH_ARROW)
int64_t io___OutputStream__Tell(const std::shared_ptr<arrow::io::OutputStream>& stream);
RcppExport SEXP _arrow_io___OutputStream__Tell(SEXP stream_sexp){
BEGIN_RCPP
	Rcpp::traits::input_parameter<const std::shared_ptr<arrow::io::OutputStream>&>::type stream(stream_sexp);
	return Rcpp::wrap(io___OutputStream__Tell(stream));
END_RCPP
}
#else
RcppExport SEXP _arrow_io___OutputStream__Tell(SEXP stream_sexp){
	Rf_error("Cannot call io___OutputStream__Tell(). Please use arrow::install_arrow() to install required runtime libraries. ");
}
#endif

// io.cpp
#if defined(ARROW_R_WITH_ARROW)
std::shared_ptr<arrow::io::FileOutputStream> io___FileOutputStream__Open(const std::string& path);
RcppExport SEXP _arrow_io___FileOutputStream__Open(SEXP path_sexp){
BEGIN_RCPP
	Rcpp::traits::input_parameter<const std::string&>::type path(path_sexp);
	return Rcpp::wrap(io___FileOutputStream__Open(path));
END_RCPP
}
#else
RcppExport SEXP _arrow_io___FileOutputStream__Open(SEXP path_sexp){
	Rf_error("Cannot call io___FileOutputStream__Open(). Please use arrow::install_arrow() to install required runtime libraries. ");
}
#endif

// io.cpp
#if defined(ARROW_R_WITH_ARROW)
std::shared_ptr<arrow::io::BufferOutputStream> io___BufferOutputStream__Create(int64_t initial_capacity);
RcppExport SEXP _arrow_io___BufferOutputStream__Create(SEXP initial_capacity_sexp){
BEGIN_RCPP
	Rcpp::traits::input_parameter<int64_t>::type initial_capacity(initial_capacity_sexp);
	return Rcpp::wrap(io___BufferOutputStream__Create(initial_capacity));
END_RCPP
}
#else
RcppExport SEXP _arrow_io___BufferOutputStream__Create(SEXP initial_capacity_sexp){
	Rf_error("Cannot call io___BufferOutputStream__Create(). Please use arrow::install_arrow() to install required runtime libraries. ");
}
#endif

// io.cpp
#if defined(ARROW_R_WITH_ARROW)
int64_t io___BufferOutputStream__capacity(const std::shared_ptr<arrow::io::BufferOutputStream>& stream);
RcppExport SEXP _arrow_io___BufferOutputStream__capacity(SEXP stream_sexp){
BEGIN_RCPP
	Rcpp::traits::input_parameter<const std::shared_ptr<arrow::io::BufferOutputStream>&>::type stream(stream_sexp);
	return Rcpp::wrap(io___BufferOutputStream__capacity(stream));
END_RCPP
}
#else
RcppExport SEXP _arrow_io___BufferOutputStream__capacity(SEXP stream_sexp){
	Rf_error("Cannot call io___BufferOutputStream__capacity(). Please use arrow::install_arrow() to install required runtime libraries. ");
}
#endif

// io.cpp
#if defined(ARROW_R_WITH_ARROW)
std::shared_ptr<arrow::Buffer> io___BufferOutputStream__Finish(const std::shared_ptr<arrow::io::BufferOutputStream>& stream);
RcppExport SEXP _arrow_io___BufferOutputStream__Finish(SEXP stream_sexp){
BEGIN_RCPP
	Rcpp::traits::input_parameter<const std::shared_ptr<arrow::io::BufferOutputStream>&>::type stream(stream_sexp);
	return Rcpp::wrap(io___BufferOutputStream__Finish(stream));
END_RCPP
}
#else
RcppExport SEXP _arrow_io___BufferOutputStream__Finish(SEXP stream_sexp){
	Rf_error("Cannot call io___BufferOutputStream__Finish(). Please use arrow::install_arrow() to install required runtime libraries. ");
}
#endif

// io.cpp
#if defined(ARROW_R_WITH_ARROW)
int64_t io___BufferOutputStream__Tell(const std::shared_ptr<arrow::io::BufferOutputStream>& stream);
RcppExport SEXP _arrow_io___BufferOutputStream__Tell(SEXP stream_sexp){
BEGIN_RCPP
	Rcpp::traits::input_parameter<const std::shared_ptr<arrow::io::BufferOutputStream>&>::type stream(stream_sexp);
	return Rcpp::wrap(io___BufferOutputStream__Tell(stream));
END_RCPP
}
#else
RcppExport SEXP _arrow_io___BufferOutputStream__Tell(SEXP stream_sexp){
	Rf_error("Cannot call io___BufferOutputStream__Tell(). Please use arrow::install_arrow() to install required runtime libraries. ");
}
#endif

// io.cpp
#if defined(ARROW_R_WITH_ARROW)
void io___BufferOutputStream__Write(const std::shared_ptr<arrow::io::BufferOutputStream>& stream, RawVector_ bytes);
RcppExport SEXP _arrow_io___BufferOutputStream__Write(SEXP stream_sexp, SEXP bytes_sexp){
BEGIN_RCPP
	Rcpp::traits::input_parameter<const std::shared_ptr<arrow::io::BufferOutputStream>&>::type stream(stream_sexp);
	Rcpp::traits::input_parameter<RawVector_>::type bytes(bytes_sexp);
	io___BufferOutputStream__Write(stream, bytes);
	return R_NilValue;
END_RCPP
}
#else
RcppExport SEXP _arrow_io___BufferOutputStream__Write(SEXP stream_sexp, SEXP bytes_sexp){
	Rf_error("Cannot call io___BufferOutputStream__Write(). Please use arrow::install_arrow() to install required runtime libraries. ");
}
#endif

// io.cpp
#if defined(ARROW_R_WITH_ARROW)
std::shared_ptr<arrow::io::MockOutputStream> io___MockOutputStream__initialize();
RcppExport SEXP _arrow_io___MockOutputStream__initialize(){
BEGIN_RCPP
	return Rcpp::wrap(io___MockOutputStream__initialize());
END_RCPP
}
#else
RcppExport SEXP _arrow_io___MockOutputStream__initialize(){
	Rf_error("Cannot call io___MockOutputStream__initialize(). Please use arrow::install_arrow() to install required runtime libraries. ");
}
#endif

// io.cpp
#if defined(ARROW_R_WITH_ARROW)
int64_t io___MockOutputStream__GetExtentBytesWritten(const std::shared_ptr<arrow::io::MockOutputStream>& stream);
RcppExport SEXP _arrow_io___MockOutputStream__GetExtentBytesWritten(SEXP stream_sexp){
BEGIN_RCPP
	Rcpp::traits::input_parameter<const std::shared_ptr<arrow::io::MockOutputStream>&>::type stream(stream_sexp);
	return Rcpp::wrap(io___MockOutputStream__GetExtentBytesWritten(stream));
END_RCPP
}
#else
RcppExport SEXP _arrow_io___MockOutputStream__GetExtentBytesWritten(SEXP stream_sexp){
	Rf_error("Cannot call io___MockOutputStream__GetExtentBytesWritten(). Please use arrow::install_arrow() to install required runtime libraries. ");
}
#endif

// io.cpp
#if defined(ARROW_R_WITH_ARROW)
std::shared_ptr<arrow::io::FixedSizeBufferWriter> io___FixedSizeBufferWriter__initialize(const std::shared_ptr<arrow::Buffer>& buffer);
RcppExport SEXP _arrow_io___FixedSizeBufferWriter__initialize(SEXP buffer_sexp){
BEGIN_RCPP
	Rcpp::traits::input_parameter<const std::shared_ptr<arrow::Buffer>&>::type buffer(buffer_sexp);
	return Rcpp::wrap(io___FixedSizeBufferWriter__initialize(buffer));
END_RCPP
}
#else
RcppExport SEXP _arrow_io___FixedSizeBufferWriter__initialize(SEXP buffer_sexp){
	Rf_error("Cannot call io___FixedSizeBufferWriter__initialize(). Please use arrow::install_arrow() to install required runtime libraries. ");
}
#endif

// json.cpp
#if defined(ARROW_R_WITH_ARROW)
std::shared_ptr<arrow::json::ReadOptions> json___ReadOptions__initialize(List_ options);
RcppExport SEXP _arrow_json___ReadOptions__initialize(SEXP options_sexp){
BEGIN_RCPP
	Rcpp::traits::input_parameter<List_>::type options(options_sexp);
	return Rcpp::wrap(json___ReadOptions__initialize(options));
END_RCPP
}
#else
RcppExport SEXP _arrow_json___ReadOptions__initialize(SEXP options_sexp){
	Rf_error("Cannot call json___ReadOptions__initialize(). Please use arrow::install_arrow() to install required runtime libraries. ");
}
#endif

// json.cpp
#if defined(ARROW_R_WITH_ARROW)
std::shared_ptr<arrow::json::ParseOptions> json___ParseOptions__initialize(List_ options);
RcppExport SEXP _arrow_json___ParseOptions__initialize(SEXP options_sexp){
BEGIN_RCPP
	Rcpp::traits::input_parameter<List_>::type options(options_sexp);
	return Rcpp::wrap(json___ParseOptions__initialize(options));
END_RCPP
}
#else
RcppExport SEXP _arrow_json___ParseOptions__initialize(SEXP options_sexp){
	Rf_error("Cannot call json___ParseOptions__initialize(). Please use arrow::install_arrow() to install required runtime libraries. ");
}
#endif

// json.cpp
#if defined(ARROW_R_WITH_ARROW)
std::shared_ptr<arrow::json::TableReader> json___TableReader__Make(const std::shared_ptr<arrow::io::InputStream>& input, const std::shared_ptr<arrow::json::ReadOptions>& read_options, const std::shared_ptr<arrow::json::ParseOptions>& parse_options);
RcppExport SEXP _arrow_json___TableReader__Make(SEXP input_sexp, SEXP read_options_sexp, SEXP parse_options_sexp){
BEGIN_RCPP
	Rcpp::traits::input_parameter<const std::shared_ptr<arrow::io::InputStream>&>::type input(input_sexp);
	Rcpp::traits::input_parameter<const std::shared_ptr<arrow::json::ReadOptions>&>::type read_options(read_options_sexp);
	Rcpp::traits::input_parameter<const std::shared_ptr<arrow::json::ParseOptions>&>::type parse_options(parse_options_sexp);
	return Rcpp::wrap(json___TableReader__Make(input, read_options, parse_options));
END_RCPP
}
#else
RcppExport SEXP _arrow_json___TableReader__Make(SEXP input_sexp, SEXP read_options_sexp, SEXP parse_options_sexp){
	Rf_error("Cannot call json___TableReader__Make(). Please use arrow::install_arrow() to install required runtime libraries. ");
}
#endif

// json.cpp
#if defined(ARROW_R_WITH_ARROW)
std::shared_ptr<arrow::Table> json___TableReader__Read(const std::shared_ptr<arrow::json::TableReader>& table_reader);
RcppExport SEXP _arrow_json___TableReader__Read(SEXP table_reader_sexp){
BEGIN_RCPP
	Rcpp::traits::input_parameter<const std::shared_ptr<arrow::json::TableReader>&>::type table_reader(table_reader_sexp);
	return Rcpp::wrap(json___TableReader__Read(table_reader));
END_RCPP
}
#else
RcppExport SEXP _arrow_json___TableReader__Read(SEXP table_reader_sexp){
	Rf_error("Cannot call json___TableReader__Read(). Please use arrow::install_arrow() to install required runtime libraries. ");
}
#endif

// memorypool.cpp
#if defined(ARROW_R_WITH_ARROW)
std::shared_ptr<arrow::MemoryPool> MemoryPool__default();
RcppExport SEXP _arrow_MemoryPool__default(){
BEGIN_RCPP
	return Rcpp::wrap(MemoryPool__default());
END_RCPP
}
#else
RcppExport SEXP _arrow_MemoryPool__default(){
	Rf_error("Cannot call MemoryPool__default(). Please use arrow::install_arrow() to install required runtime libraries. ");
}
#endif

// memorypool.cpp
#if defined(ARROW_R_WITH_ARROW)
int MemoryPool__bytes_allocated(const std::shared_ptr<arrow::MemoryPool>& pool);
RcppExport SEXP _arrow_MemoryPool__bytes_allocated(SEXP pool_sexp){
BEGIN_RCPP
	Rcpp::traits::input_parameter<const std::shared_ptr<arrow::MemoryPool>&>::type pool(pool_sexp);
	return Rcpp::wrap(MemoryPool__bytes_allocated(pool));
END_RCPP
}
#else
RcppExport SEXP _arrow_MemoryPool__bytes_allocated(SEXP pool_sexp){
	Rf_error("Cannot call MemoryPool__bytes_allocated(). Please use arrow::install_arrow() to install required runtime libraries. ");
}
#endif

// memorypool.cpp
#if defined(ARROW_R_WITH_ARROW)
int MemoryPool__max_memory(const std::shared_ptr<arrow::MemoryPool>& pool);
RcppExport SEXP _arrow_MemoryPool__max_memory(SEXP pool_sexp){
BEGIN_RCPP
	Rcpp::traits::input_parameter<const std::shared_ptr<arrow::MemoryPool>&>::type pool(pool_sexp);
	return Rcpp::wrap(MemoryPool__max_memory(pool));
END_RCPP
}
#else
RcppExport SEXP _arrow_MemoryPool__max_memory(SEXP pool_sexp){
	Rf_error("Cannot call MemoryPool__max_memory(). Please use arrow::install_arrow() to install required runtime libraries. ");
}
#endif

// message.cpp
#if defined(ARROW_R_WITH_ARROW)
int64_t ipc___Message__body_length(const std::unique_ptr<arrow::ipc::Message>& message);
RcppExport SEXP _arrow_ipc___Message__body_length(SEXP message_sexp){
BEGIN_RCPP
	Rcpp::traits::input_parameter<const std::unique_ptr<arrow::ipc::Message>&>::type message(message_sexp);
	return Rcpp::wrap(ipc___Message__body_length(message));
END_RCPP
}
#else
RcppExport SEXP _arrow_ipc___Message__body_length(SEXP message_sexp){
	Rf_error("Cannot call ipc___Message__body_length(). Please use arrow::install_arrow() to install required runtime libraries. ");
}
#endif

// message.cpp
#if defined(ARROW_R_WITH_ARROW)
std::shared_ptr<arrow::Buffer> ipc___Message__metadata(const std::unique_ptr<arrow::ipc::Message>& message);
RcppExport SEXP _arrow_ipc___Message__metadata(SEXP message_sexp){
BEGIN_RCPP
	Rcpp::traits::input_parameter<const std::unique_ptr<arrow::ipc::Message>&>::type message(message_sexp);
	return Rcpp::wrap(ipc___Message__metadata(message));
END_RCPP
}
#else
RcppExport SEXP _arrow_ipc___Message__metadata(SEXP message_sexp){
	Rf_error("Cannot call ipc___Message__metadata(). Please use arrow::install_arrow() to install required runtime libraries. ");
}
#endif

// message.cpp
#if defined(ARROW_R_WITH_ARROW)
std::shared_ptr<arrow::Buffer> ipc___Message__body(const std::unique_ptr<arrow::ipc::Message>& message);
RcppExport SEXP _arrow_ipc___Message__body(SEXP message_sexp){
BEGIN_RCPP
	Rcpp::traits::input_parameter<const std::unique_ptr<arrow::ipc::Message>&>::type message(message_sexp);
	return Rcpp::wrap(ipc___Message__body(message));
END_RCPP
}
#else
RcppExport SEXP _arrow_ipc___Message__body(SEXP message_sexp){
	Rf_error("Cannot call ipc___Message__body(). Please use arrow::install_arrow() to install required runtime libraries. ");
}
#endif

// message.cpp
#if defined(ARROW_R_WITH_ARROW)
int64_t ipc___Message__Verify(const std::unique_ptr<arrow::ipc::Message>& message);
RcppExport SEXP _arrow_ipc___Message__Verify(SEXP message_sexp){
BEGIN_RCPP
	Rcpp::traits::input_parameter<const std::unique_ptr<arrow::ipc::Message>&>::type message(message_sexp);
	return Rcpp::wrap(ipc___Message__Verify(message));
END_RCPP
}
#else
RcppExport SEXP _arrow_ipc___Message__Verify(SEXP message_sexp){
	Rf_error("Cannot call ipc___Message__Verify(). Please use arrow::install_arrow() to install required runtime libraries. ");
}
#endif

// message.cpp
#if defined(ARROW_R_WITH_ARROW)
arrow::ipc::Message::Type ipc___Message__type(const std::unique_ptr<arrow::ipc::Message>& message);
RcppExport SEXP _arrow_ipc___Message__type(SEXP message_sexp){
BEGIN_RCPP
	Rcpp::traits::input_parameter<const std::unique_ptr<arrow::ipc::Message>&>::type message(message_sexp);
	return Rcpp::wrap(ipc___Message__type(message));
END_RCPP
}
#else
RcppExport SEXP _arrow_ipc___Message__type(SEXP message_sexp){
	Rf_error("Cannot call ipc___Message__type(). Please use arrow::install_arrow() to install required runtime libraries. ");
}
#endif

// message.cpp
#if defined(ARROW_R_WITH_ARROW)
bool ipc___Message__Equals(const std::unique_ptr<arrow::ipc::Message>& x, const std::unique_ptr<arrow::ipc::Message>& y);
RcppExport SEXP _arrow_ipc___Message__Equals(SEXP x_sexp, SEXP y_sexp){
BEGIN_RCPP
	Rcpp::traits::input_parameter<const std::unique_ptr<arrow::ipc::Message>&>::type x(x_sexp);
	Rcpp::traits::input_parameter<const std::unique_ptr<arrow::ipc::Message>&>::type y(y_sexp);
	return Rcpp::wrap(ipc___Message__Equals(x, y));
END_RCPP
}
#else
RcppExport SEXP _arrow_ipc___Message__Equals(SEXP x_sexp, SEXP y_sexp){
	Rf_error("Cannot call ipc___Message__Equals(). Please use arrow::install_arrow() to install required runtime libraries. ");
}
#endif

// message.cpp
#if defined(ARROW_R_WITH_ARROW)
std::shared_ptr<arrow::RecordBatch> ipc___ReadRecordBatch__Message__Schema(const std::unique_ptr<arrow::ipc::Message>& message, const std::shared_ptr<arrow::Schema>& schema);
RcppExport SEXP _arrow_ipc___ReadRecordBatch__Message__Schema(SEXP message_sexp, SEXP schema_sexp){
BEGIN_RCPP
	Rcpp::traits::input_parameter<const std::unique_ptr<arrow::ipc::Message>&>::type message(message_sexp);
	Rcpp::traits::input_parameter<const std::shared_ptr<arrow::Schema>&>::type schema(schema_sexp);
	return Rcpp::wrap(ipc___ReadRecordBatch__Message__Schema(message, schema));
END_RCPP
}
#else
RcppExport SEXP _arrow_ipc___ReadRecordBatch__Message__Schema(SEXP message_sexp, SEXP schema_sexp){
	Rf_error("Cannot call ipc___ReadRecordBatch__Message__Schema(). Please use arrow::install_arrow() to install required runtime libraries. ");
}
#endif

// message.cpp
#if defined(ARROW_R_WITH_ARROW)
std::shared_ptr<arrow::Schema> ipc___ReadSchema_InputStream(const std::shared_ptr<arrow::io::InputStream>& stream);
RcppExport SEXP _arrow_ipc___ReadSchema_InputStream(SEXP stream_sexp){
BEGIN_RCPP
	Rcpp::traits::input_parameter<const std::shared_ptr<arrow::io::InputStream>&>::type stream(stream_sexp);
	return Rcpp::wrap(ipc___ReadSchema_InputStream(stream));
END_RCPP
}
#else
RcppExport SEXP _arrow_ipc___ReadSchema_InputStream(SEXP stream_sexp){
	Rf_error("Cannot call ipc___ReadSchema_InputStream(). Please use arrow::install_arrow() to install required runtime libraries. ");
}
#endif

// message.cpp
#if defined(ARROW_R_WITH_ARROW)
std::shared_ptr<arrow::Schema> ipc___ReadSchema_Message(const std::unique_ptr<arrow::ipc::Message>& message);
RcppExport SEXP _arrow_ipc___ReadSchema_Message(SEXP message_sexp){
BEGIN_RCPP
	Rcpp::traits::input_parameter<const std::unique_ptr<arrow::ipc::Message>&>::type message(message_sexp);
	return Rcpp::wrap(ipc___ReadSchema_Message(message));
END_RCPP
}
#else
RcppExport SEXP _arrow_ipc___ReadSchema_Message(SEXP message_sexp){
	Rf_error("Cannot call ipc___ReadSchema_Message(). Please use arrow::install_arrow() to install required runtime libraries. ");
}
#endif

// message.cpp
#if defined(ARROW_R_WITH_ARROW)
std::unique_ptr<arrow::ipc::MessageReader> ipc___MessageReader__Open(const std::shared_ptr<arrow::io::InputStream>& stream);
RcppExport SEXP _arrow_ipc___MessageReader__Open(SEXP stream_sexp){
BEGIN_RCPP
	Rcpp::traits::input_parameter<const std::shared_ptr<arrow::io::InputStream>&>::type stream(stream_sexp);
	return Rcpp::wrap(ipc___MessageReader__Open(stream));
END_RCPP
}
#else
RcppExport SEXP _arrow_ipc___MessageReader__Open(SEXP stream_sexp){
	Rf_error("Cannot call ipc___MessageReader__Open(). Please use arrow::install_arrow() to install required runtime libraries. ");
}
#endif

// message.cpp
#if defined(ARROW_R_WITH_ARROW)
std::unique_ptr<arrow::ipc::Message> ipc___MessageReader__ReadNextMessage(const std::unique_ptr<arrow::ipc::MessageReader>& reader);
RcppExport SEXP _arrow_ipc___MessageReader__ReadNextMessage(SEXP reader_sexp){
BEGIN_RCPP
	Rcpp::traits::input_parameter<const std::unique_ptr<arrow::ipc::MessageReader>&>::type reader(reader_sexp);
	return Rcpp::wrap(ipc___MessageReader__ReadNextMessage(reader));
END_RCPP
}
#else
RcppExport SEXP _arrow_ipc___MessageReader__ReadNextMessage(SEXP reader_sexp){
	Rf_error("Cannot call ipc___MessageReader__ReadNextMessage(). Please use arrow::install_arrow() to install required runtime libraries. ");
}
#endif

// message.cpp
#if defined(ARROW_R_WITH_ARROW)
std::unique_ptr<arrow::ipc::Message> ipc___ReadMessage(const std::shared_ptr<arrow::io::InputStream>& stream);
RcppExport SEXP _arrow_ipc___ReadMessage(SEXP stream_sexp){
BEGIN_RCPP
	Rcpp::traits::input_parameter<const std::shared_ptr<arrow::io::InputStream>&>::type stream(stream_sexp);
	return Rcpp::wrap(ipc___ReadMessage(stream));
END_RCPP
}
#else
RcppExport SEXP _arrow_ipc___ReadMessage(SEXP stream_sexp){
	Rf_error("Cannot call ipc___ReadMessage(). Please use arrow::install_arrow() to install required runtime libraries. ");
}
#endif

// parquet.cpp
#if defined(ARROW_R_WITH_ARROW)
std::shared_ptr<parquet::arrow::ArrowReaderProperties> parquet___arrow___ArrowReaderProperties__Make(bool use_threads);
RcppExport SEXP _arrow_parquet___arrow___ArrowReaderProperties__Make(SEXP use_threads_sexp){
BEGIN_RCPP
	Rcpp::traits::input_parameter<bool>::type use_threads(use_threads_sexp);
	return Rcpp::wrap(parquet___arrow___ArrowReaderProperties__Make(use_threads));
END_RCPP
}
#else
RcppExport SEXP _arrow_parquet___arrow___ArrowReaderProperties__Make(SEXP use_threads_sexp){
	Rf_error("Cannot call parquet___arrow___ArrowReaderProperties__Make(). Please use arrow::install_arrow() to install required runtime libraries. ");
}
#endif

// parquet.cpp
#if defined(ARROW_R_WITH_ARROW)
void parquet___arrow___ArrowReaderProperties__set_use_threads(const std::shared_ptr<parquet::arrow::ArrowReaderProperties>& properties, bool use_threads);
RcppExport SEXP _arrow_parquet___arrow___ArrowReaderProperties__set_use_threads(SEXP properties_sexp, SEXP use_threads_sexp){
BEGIN_RCPP
	Rcpp::traits::input_parameter<const std::shared_ptr<parquet::arrow::ArrowReaderProperties>&>::type properties(properties_sexp);
	Rcpp::traits::input_parameter<bool>::type use_threads(use_threads_sexp);
	parquet___arrow___ArrowReaderProperties__set_use_threads(properties, use_threads);
	return R_NilValue;
END_RCPP
}
#else
RcppExport SEXP _arrow_parquet___arrow___ArrowReaderProperties__set_use_threads(SEXP properties_sexp, SEXP use_threads_sexp){
	Rf_error("Cannot call parquet___arrow___ArrowReaderProperties__set_use_threads(). Please use arrow::install_arrow() to install required runtime libraries. ");
}
#endif

// parquet.cpp
#if defined(ARROW_R_WITH_ARROW)
bool parquet___arrow___ArrowReaderProperties__get_use_threads(const std::shared_ptr<parquet::arrow::ArrowReaderProperties>& properties, bool use_threads);
RcppExport SEXP _arrow_parquet___arrow___ArrowReaderProperties__get_use_threads(SEXP properties_sexp, SEXP use_threads_sexp){
BEGIN_RCPP
	Rcpp::traits::input_parameter<const std::shared_ptr<parquet::arrow::ArrowReaderProperties>&>::type properties(properties_sexp);
	Rcpp::traits::input_parameter<bool>::type use_threads(use_threads_sexp);
	return Rcpp::wrap(parquet___arrow___ArrowReaderProperties__get_use_threads(properties, use_threads));
END_RCPP
}
#else
RcppExport SEXP _arrow_parquet___arrow___ArrowReaderProperties__get_use_threads(SEXP properties_sexp, SEXP use_threads_sexp){
	Rf_error("Cannot call parquet___arrow___ArrowReaderProperties__get_use_threads(). Please use arrow::install_arrow() to install required runtime libraries. ");
}
#endif

// parquet.cpp
#if defined(ARROW_R_WITH_ARROW)
bool parquet___arrow___ArrowReaderProperties__get_read_dictionary(const std::shared_ptr<parquet::arrow::ArrowReaderProperties>& properties, int column_index);
RcppExport SEXP _arrow_parquet___arrow___ArrowReaderProperties__get_read_dictionary(SEXP properties_sexp, SEXP column_index_sexp){
BEGIN_RCPP
	Rcpp::traits::input_parameter<const std::shared_ptr<parquet::arrow::ArrowReaderProperties>&>::type properties(properties_sexp);
	Rcpp::traits::input_parameter<int>::type column_index(column_index_sexp);
	return Rcpp::wrap(parquet___arrow___ArrowReaderProperties__get_read_dictionary(properties, column_index));
END_RCPP
}
#else
RcppExport SEXP _arrow_parquet___arrow___ArrowReaderProperties__get_read_dictionary(SEXP properties_sexp, SEXP column_index_sexp){
	Rf_error("Cannot call parquet___arrow___ArrowReaderProperties__get_read_dictionary(). Please use arrow::install_arrow() to install required runtime libraries. ");
}
#endif

// parquet.cpp
#if defined(ARROW_R_WITH_ARROW)
void parquet___arrow___ArrowReaderProperties__set_read_dictionary(const std::shared_ptr<parquet::arrow::ArrowReaderProperties>& properties, int column_index, bool read_dict);
RcppExport SEXP _arrow_parquet___arrow___ArrowReaderProperties__set_read_dictionary(SEXP properties_sexp, SEXP column_index_sexp, SEXP read_dict_sexp){
BEGIN_RCPP
	Rcpp::traits::input_parameter<const std::shared_ptr<parquet::arrow::ArrowReaderProperties>&>::type properties(properties_sexp);
	Rcpp::traits::input_parameter<int>::type column_index(column_index_sexp);
	Rcpp::traits::input_parameter<bool>::type read_dict(read_dict_sexp);
	parquet___arrow___ArrowReaderProperties__set_read_dictionary(properties, column_index, read_dict);
	return R_NilValue;
END_RCPP
}
#else
RcppExport SEXP _arrow_parquet___arrow___ArrowReaderProperties__set_read_dictionary(SEXP properties_sexp, SEXP column_index_sexp, SEXP read_dict_sexp){
	Rf_error("Cannot call parquet___arrow___ArrowReaderProperties__set_read_dictionary(). Please use arrow::install_arrow() to install required runtime libraries. ");
}
#endif

// parquet.cpp
#if defined(ARROW_R_WITH_ARROW)
std::unique_ptr<parquet::arrow::FileReader> parquet___arrow___FileReader__OpenFile(const std::shared_ptr<arrow::io::RandomAccessFile>& file, const std::shared_ptr<parquet::arrow::ArrowReaderProperties>& props);
RcppExport SEXP _arrow_parquet___arrow___FileReader__OpenFile(SEXP file_sexp, SEXP props_sexp){
BEGIN_RCPP
	Rcpp::traits::input_parameter<const std::shared_ptr<arrow::io::RandomAccessFile>&>::type file(file_sexp);
	Rcpp::traits::input_parameter<const std::shared_ptr<parquet::arrow::ArrowReaderProperties>&>::type props(props_sexp);
	return Rcpp::wrap(parquet___arrow___FileReader__OpenFile(file, props));
END_RCPP
}
#else
RcppExport SEXP _arrow_parquet___arrow___FileReader__OpenFile(SEXP file_sexp, SEXP props_sexp){
	Rf_error("Cannot call parquet___arrow___FileReader__OpenFile(). Please use arrow::install_arrow() to install required runtime libraries. ");
}
#endif

// parquet.cpp
#if defined(ARROW_R_WITH_ARROW)
std::shared_ptr<arrow::Table> parquet___arrow___FileReader__ReadTable1(const std::unique_ptr<parquet::arrow::FileReader>& reader);
RcppExport SEXP _arrow_parquet___arrow___FileReader__ReadTable1(SEXP reader_sexp){
BEGIN_RCPP
	Rcpp::traits::input_parameter<const std::unique_ptr<parquet::arrow::FileReader>&>::type reader(reader_sexp);
	return Rcpp::wrap(parquet___arrow___FileReader__ReadTable1(reader));
END_RCPP
}
#else
RcppExport SEXP _arrow_parquet___arrow___FileReader__ReadTable1(SEXP reader_sexp){
	Rf_error("Cannot call parquet___arrow___FileReader__ReadTable1(). Please use arrow::install_arrow() to install required runtime libraries. ");
}
#endif

// parquet.cpp
#if defined(ARROW_R_WITH_ARROW)
std::shared_ptr<arrow::Table> parquet___arrow___FileReader__ReadTable2(const std::unique_ptr<parquet::arrow::FileReader>& reader, const std::vector<int>& column_indices);
RcppExport SEXP _arrow_parquet___arrow___FileReader__ReadTable2(SEXP reader_sexp, SEXP column_indices_sexp){
BEGIN_RCPP
	Rcpp::traits::input_parameter<const std::unique_ptr<parquet::arrow::FileReader>&>::type reader(reader_sexp);
	Rcpp::traits::input_parameter<const std::vector<int>&>::type column_indices(column_indices_sexp);
	return Rcpp::wrap(parquet___arrow___FileReader__ReadTable2(reader, column_indices));
END_RCPP
}
#else
RcppExport SEXP _arrow_parquet___arrow___FileReader__ReadTable2(SEXP reader_sexp, SEXP column_indices_sexp){
	Rf_error("Cannot call parquet___arrow___FileReader__ReadTable2(). Please use arrow::install_arrow() to install required runtime libraries. ");
}
#endif

// parquet.cpp
#if defined(ARROW_R_WITH_ARROW)
void write_parquet_file(const std::shared_ptr<arrow::Table>& table, std::string filename);
RcppExport SEXP _arrow_write_parquet_file(SEXP table_sexp, SEXP filename_sexp){
BEGIN_RCPP
	Rcpp::traits::input_parameter<const std::shared_ptr<arrow::Table>&>::type table(table_sexp);
	Rcpp::traits::input_parameter<std::string>::type filename(filename_sexp);
	write_parquet_file(table, filename);
	return R_NilValue;
END_RCPP
}
#else
RcppExport SEXP _arrow_write_parquet_file(SEXP table_sexp, SEXP filename_sexp){
	Rf_error("Cannot call write_parquet_file(). Please use arrow::install_arrow() to install required runtime libraries. ");
}
#endif

// parquet.cpp
#if defined(ARROW_R_WITH_ARROW)
std::shared_ptr<arrow::Schema> parquet___arrow___FileReader__GetSchema2(const std::unique_ptr<parquet::arrow::FileReader>& reader, const std::vector<int>& indices);
RcppExport SEXP _arrow_parquet___arrow___FileReader__GetSchema2(SEXP reader_sexp, SEXP indices_sexp){
BEGIN_RCPP
	Rcpp::traits::input_parameter<const std::unique_ptr<parquet::arrow::FileReader>&>::type reader(reader_sexp);
	Rcpp::traits::input_parameter<const std::vector<int>&>::type indices(indices_sexp);
	return Rcpp::wrap(parquet___arrow___FileReader__GetSchema2(reader, indices));
END_RCPP
}
#else
RcppExport SEXP _arrow_parquet___arrow___FileReader__GetSchema2(SEXP reader_sexp, SEXP indices_sexp){
	Rf_error("Cannot call parquet___arrow___FileReader__GetSchema2(). Please use arrow::install_arrow() to install required runtime libraries. ");
}
#endif

// parquet.cpp
#if defined(ARROW_R_WITH_ARROW)
std::shared_ptr<arrow::Schema> parquet___arrow___FileReader__GetSchema1(const std::unique_ptr<parquet::arrow::FileReader>& reader);
RcppExport SEXP _arrow_parquet___arrow___FileReader__GetSchema1(SEXP reader_sexp){
BEGIN_RCPP
	Rcpp::traits::input_parameter<const std::unique_ptr<parquet::arrow::FileReader>&>::type reader(reader_sexp);
	return Rcpp::wrap(parquet___arrow___FileReader__GetSchema1(reader));
END_RCPP
}
#else
RcppExport SEXP _arrow_parquet___arrow___FileReader__GetSchema1(SEXP reader_sexp){
	Rf_error("Cannot call parquet___arrow___FileReader__GetSchema1(). Please use arrow::install_arrow() to install required runtime libraries. ");
}
#endif

// recordbatch.cpp
#if defined(ARROW_R_WITH_ARROW)
int RecordBatch__num_columns(const std::shared_ptr<arrow::RecordBatch>& x);
RcppExport SEXP _arrow_RecordBatch__num_columns(SEXP x_sexp){
BEGIN_RCPP
	Rcpp::traits::input_parameter<const std::shared_ptr<arrow::RecordBatch>&>::type x(x_sexp);
	return Rcpp::wrap(RecordBatch__num_columns(x));
END_RCPP
}
#else
RcppExport SEXP _arrow_RecordBatch__num_columns(SEXP x_sexp){
	Rf_error("Cannot call RecordBatch__num_columns(). Please use arrow::install_arrow() to install required runtime libraries. ");
}
#endif

// recordbatch.cpp
#if defined(ARROW_R_WITH_ARROW)
int RecordBatch__num_rows(const std::shared_ptr<arrow::RecordBatch>& x);
RcppExport SEXP _arrow_RecordBatch__num_rows(SEXP x_sexp){
BEGIN_RCPP
	Rcpp::traits::input_parameter<const std::shared_ptr<arrow::RecordBatch>&>::type x(x_sexp);
	return Rcpp::wrap(RecordBatch__num_rows(x));
END_RCPP
}
#else
RcppExport SEXP _arrow_RecordBatch__num_rows(SEXP x_sexp){
	Rf_error("Cannot call RecordBatch__num_rows(). Please use arrow::install_arrow() to install required runtime libraries. ");
}
#endif

// recordbatch.cpp
#if defined(ARROW_R_WITH_ARROW)
std::shared_ptr<arrow::Schema> RecordBatch__schema(const std::shared_ptr<arrow::RecordBatch>& x);
RcppExport SEXP _arrow_RecordBatch__schema(SEXP x_sexp){
BEGIN_RCPP
	Rcpp::traits::input_parameter<const std::shared_ptr<arrow::RecordBatch>&>::type x(x_sexp);
	return Rcpp::wrap(RecordBatch__schema(x));
END_RCPP
}
#else
RcppExport SEXP _arrow_RecordBatch__schema(SEXP x_sexp){
	Rf_error("Cannot call RecordBatch__schema(). Please use arrow::install_arrow() to install required runtime libraries. ");
}
#endif

// recordbatch.cpp
#if defined(ARROW_R_WITH_ARROW)
arrow::ArrayVector RecordBatch__columns(const std::shared_ptr<arrow::RecordBatch>& batch);
RcppExport SEXP _arrow_RecordBatch__columns(SEXP batch_sexp){
BEGIN_RCPP
	Rcpp::traits::input_parameter<const std::shared_ptr<arrow::RecordBatch>&>::type batch(batch_sexp);
	return Rcpp::wrap(RecordBatch__columns(batch));
END_RCPP
}
#else
RcppExport SEXP _arrow_RecordBatch__columns(SEXP batch_sexp){
	Rf_error("Cannot call RecordBatch__columns(). Please use arrow::install_arrow() to install required runtime libraries. ");
}
#endif

// recordbatch.cpp
#if defined(ARROW_R_WITH_ARROW)
std::shared_ptr<arrow::Array> RecordBatch__column(const std::shared_ptr<arrow::RecordBatch>& batch, int i);
RcppExport SEXP _arrow_RecordBatch__column(SEXP batch_sexp, SEXP i_sexp){
BEGIN_RCPP
	Rcpp::traits::input_parameter<const std::shared_ptr<arrow::RecordBatch>&>::type batch(batch_sexp);
	Rcpp::traits::input_parameter<int>::type i(i_sexp);
	return Rcpp::wrap(RecordBatch__column(batch, i));
END_RCPP
}
#else
RcppExport SEXP _arrow_RecordBatch__column(SEXP batch_sexp, SEXP i_sexp){
	Rf_error("Cannot call RecordBatch__column(). Please use arrow::install_arrow() to install required runtime libraries. ");
}
#endif

// recordbatch.cpp
#if defined(ARROW_R_WITH_ARROW)
std::shared_ptr<arrow::RecordBatch> RecordBatch__from_dataframe(Rcpp::DataFrame tbl);
RcppExport SEXP _arrow_RecordBatch__from_dataframe(SEXP tbl_sexp){
BEGIN_RCPP
	Rcpp::traits::input_parameter<Rcpp::DataFrame>::type tbl(tbl_sexp);
	return Rcpp::wrap(RecordBatch__from_dataframe(tbl));
END_RCPP
}
#else
RcppExport SEXP _arrow_RecordBatch__from_dataframe(SEXP tbl_sexp){
	Rf_error("Cannot call RecordBatch__from_dataframe(). Please use arrow::install_arrow() to install required runtime libraries. ");
}
#endif

// recordbatch.cpp
#if defined(ARROW_R_WITH_ARROW)
bool RecordBatch__Equals(const std::shared_ptr<arrow::RecordBatch>& self, const std::shared_ptr<arrow::RecordBatch>& other);
RcppExport SEXP _arrow_RecordBatch__Equals(SEXP self_sexp, SEXP other_sexp){
BEGIN_RCPP
	Rcpp::traits::input_parameter<const std::shared_ptr<arrow::RecordBatch>&>::type self(self_sexp);
	Rcpp::traits::input_parameter<const std::shared_ptr<arrow::RecordBatch>&>::type other(other_sexp);
	return Rcpp::wrap(RecordBatch__Equals(self, other));
END_RCPP
}
#else
RcppExport SEXP _arrow_RecordBatch__Equals(SEXP self_sexp, SEXP other_sexp){
	Rf_error("Cannot call RecordBatch__Equals(). Please use arrow::install_arrow() to install required runtime libraries. ");
}
#endif

// recordbatch.cpp
#if defined(ARROW_R_WITH_ARROW)
std::shared_ptr<arrow::RecordBatch> RecordBatch__RemoveColumn(const std::shared_ptr<arrow::RecordBatch>& batch, int i);
RcppExport SEXP _arrow_RecordBatch__RemoveColumn(SEXP batch_sexp, SEXP i_sexp){
BEGIN_RCPP
	Rcpp::traits::input_parameter<const std::shared_ptr<arrow::RecordBatch>&>::type batch(batch_sexp);
	Rcpp::traits::input_parameter<int>::type i(i_sexp);
	return Rcpp::wrap(RecordBatch__RemoveColumn(batch, i));
END_RCPP
}
#else
RcppExport SEXP _arrow_RecordBatch__RemoveColumn(SEXP batch_sexp, SEXP i_sexp){
	Rf_error("Cannot call RecordBatch__RemoveColumn(). Please use arrow::install_arrow() to install required runtime libraries. ");
}
#endif

// recordbatch.cpp
#if defined(ARROW_R_WITH_ARROW)
std::string RecordBatch__column_name(const std::shared_ptr<arrow::RecordBatch>& batch, int i);
RcppExport SEXP _arrow_RecordBatch__column_name(SEXP batch_sexp, SEXP i_sexp){
BEGIN_RCPP
	Rcpp::traits::input_parameter<const std::shared_ptr<arrow::RecordBatch>&>::type batch(batch_sexp);
	Rcpp::traits::input_parameter<int>::type i(i_sexp);
	return Rcpp::wrap(RecordBatch__column_name(batch, i));
END_RCPP
}
#else
RcppExport SEXP _arrow_RecordBatch__column_name(SEXP batch_sexp, SEXP i_sexp){
	Rf_error("Cannot call RecordBatch__column_name(). Please use arrow::install_arrow() to install required runtime libraries. ");
}
#endif

// recordbatch.cpp
#if defined(ARROW_R_WITH_ARROW)
Rcpp::CharacterVector RecordBatch__names(const std::shared_ptr<arrow::RecordBatch>& batch);
RcppExport SEXP _arrow_RecordBatch__names(SEXP batch_sexp){
BEGIN_RCPP
	Rcpp::traits::input_parameter<const std::shared_ptr<arrow::RecordBatch>&>::type batch(batch_sexp);
	return Rcpp::wrap(RecordBatch__names(batch));
END_RCPP
}
#else
RcppExport SEXP _arrow_RecordBatch__names(SEXP batch_sexp){
	Rf_error("Cannot call RecordBatch__names(). Please use arrow::install_arrow() to install required runtime libraries. ");
}
#endif

// recordbatch.cpp
#if defined(ARROW_R_WITH_ARROW)
std::shared_ptr<arrow::RecordBatch> RecordBatch__Slice1(const std::shared_ptr<arrow::RecordBatch>& self, int offset);
RcppExport SEXP _arrow_RecordBatch__Slice1(SEXP self_sexp, SEXP offset_sexp){
BEGIN_RCPP
	Rcpp::traits::input_parameter<const std::shared_ptr<arrow::RecordBatch>&>::type self(self_sexp);
	Rcpp::traits::input_parameter<int>::type offset(offset_sexp);
	return Rcpp::wrap(RecordBatch__Slice1(self, offset));
END_RCPP
}
#else
RcppExport SEXP _arrow_RecordBatch__Slice1(SEXP self_sexp, SEXP offset_sexp){
	Rf_error("Cannot call RecordBatch__Slice1(). Please use arrow::install_arrow() to install required runtime libraries. ");
}
#endif

// recordbatch.cpp
#if defined(ARROW_R_WITH_ARROW)
std::shared_ptr<arrow::RecordBatch> RecordBatch__Slice2(const std::shared_ptr<arrow::RecordBatch>& self, int offset, int length);
RcppExport SEXP _arrow_RecordBatch__Slice2(SEXP self_sexp, SEXP offset_sexp, SEXP length_sexp){
BEGIN_RCPP
	Rcpp::traits::input_parameter<const std::shared_ptr<arrow::RecordBatch>&>::type self(self_sexp);
	Rcpp::traits::input_parameter<int>::type offset(offset_sexp);
	Rcpp::traits::input_parameter<int>::type length(length_sexp);
	return Rcpp::wrap(RecordBatch__Slice2(self, offset, length));
END_RCPP
}
#else
RcppExport SEXP _arrow_RecordBatch__Slice2(SEXP self_sexp, SEXP offset_sexp, SEXP length_sexp){
	Rf_error("Cannot call RecordBatch__Slice2(). Please use arrow::install_arrow() to install required runtime libraries. ");
}
#endif

// recordbatch.cpp
#if defined(ARROW_R_WITH_ARROW)
Rcpp::RawVector ipc___SerializeRecordBatch__Raw(const std::shared_ptr<arrow::RecordBatch>& batch);
RcppExport SEXP _arrow_ipc___SerializeRecordBatch__Raw(SEXP batch_sexp){
BEGIN_RCPP
	Rcpp::traits::input_parameter<const std::shared_ptr<arrow::RecordBatch>&>::type batch(batch_sexp);
	return Rcpp::wrap(ipc___SerializeRecordBatch__Raw(batch));
END_RCPP
}
#else
RcppExport SEXP _arrow_ipc___SerializeRecordBatch__Raw(SEXP batch_sexp){
	Rf_error("Cannot call ipc___SerializeRecordBatch__Raw(). Please use arrow::install_arrow() to install required runtime libraries. ");
}
#endif

// recordbatch.cpp
#if defined(ARROW_R_WITH_ARROW)
std::shared_ptr<arrow::RecordBatch> ipc___ReadRecordBatch__InputStream__Schema(const std::shared_ptr<arrow::io::InputStream>& stream, const std::shared_ptr<arrow::Schema>& schema);
RcppExport SEXP _arrow_ipc___ReadRecordBatch__InputStream__Schema(SEXP stream_sexp, SEXP schema_sexp){
BEGIN_RCPP
	Rcpp::traits::input_parameter<const std::shared_ptr<arrow::io::InputStream>&>::type stream(stream_sexp);
	Rcpp::traits::input_parameter<const std::shared_ptr<arrow::Schema>&>::type schema(schema_sexp);
	return Rcpp::wrap(ipc___ReadRecordBatch__InputStream__Schema(stream, schema));
END_RCPP
}
#else
RcppExport SEXP _arrow_ipc___ReadRecordBatch__InputStream__Schema(SEXP stream_sexp, SEXP schema_sexp){
	Rf_error("Cannot call ipc___ReadRecordBatch__InputStream__Schema(). Please use arrow::install_arrow() to install required runtime libraries. ");
}
#endif

// recordbatch.cpp
#if defined(ARROW_R_WITH_ARROW)
std::shared_ptr<arrow::RecordBatch> RecordBatch__from_arrays(SEXP schema_sxp, SEXP lst);
RcppExport SEXP _arrow_RecordBatch__from_arrays(SEXP schema_sxp_sexp, SEXP lst_sexp){
BEGIN_RCPP
	Rcpp::traits::input_parameter<SEXP>::type schema_sxp(schema_sxp_sexp);
	Rcpp::traits::input_parameter<SEXP>::type lst(lst_sexp);
	return Rcpp::wrap(RecordBatch__from_arrays(schema_sxp, lst));
END_RCPP
}
#else
RcppExport SEXP _arrow_RecordBatch__from_arrays(SEXP schema_sxp_sexp, SEXP lst_sexp){
	Rf_error("Cannot call RecordBatch__from_arrays(). Please use arrow::install_arrow() to install required runtime libraries. ");
}
#endif

// recordbatchreader.cpp
#if defined(ARROW_R_WITH_ARROW)
std::shared_ptr<arrow::Schema> RecordBatchReader__schema(const std::shared_ptr<arrow::RecordBatchReader>& reader);
RcppExport SEXP _arrow_RecordBatchReader__schema(SEXP reader_sexp){
BEGIN_RCPP
	Rcpp::traits::input_parameter<const std::shared_ptr<arrow::RecordBatchReader>&>::type reader(reader_sexp);
	return Rcpp::wrap(RecordBatchReader__schema(reader));
END_RCPP
}
#else
RcppExport SEXP _arrow_RecordBatchReader__schema(SEXP reader_sexp){
	Rf_error("Cannot call RecordBatchReader__schema(). Please use arrow::install_arrow() to install required runtime libraries. ");
}
#endif

// recordbatchreader.cpp
#if defined(ARROW_R_WITH_ARROW)
std::shared_ptr<arrow::RecordBatch> RecordBatchReader__ReadNext(const std::shared_ptr<arrow::RecordBatchReader>& reader);
RcppExport SEXP _arrow_RecordBatchReader__ReadNext(SEXP reader_sexp){
BEGIN_RCPP
	Rcpp::traits::input_parameter<const std::shared_ptr<arrow::RecordBatchReader>&>::type reader(reader_sexp);
	return Rcpp::wrap(RecordBatchReader__ReadNext(reader));
END_RCPP
}
#else
RcppExport SEXP _arrow_RecordBatchReader__ReadNext(SEXP reader_sexp){
	Rf_error("Cannot call RecordBatchReader__ReadNext(). Please use arrow::install_arrow() to install required runtime libraries. ");
}
#endif

// recordbatchreader.cpp
#if defined(ARROW_R_WITH_ARROW)
std::shared_ptr<arrow::RecordBatchReader> ipc___RecordBatchStreamReader__Open(const std::shared_ptr<arrow::io::InputStream>& stream);
RcppExport SEXP _arrow_ipc___RecordBatchStreamReader__Open(SEXP stream_sexp){
BEGIN_RCPP
	Rcpp::traits::input_parameter<const std::shared_ptr<arrow::io::InputStream>&>::type stream(stream_sexp);
	return Rcpp::wrap(ipc___RecordBatchStreamReader__Open(stream));
END_RCPP
}
#else
RcppExport SEXP _arrow_ipc___RecordBatchStreamReader__Open(SEXP stream_sexp){
	Rf_error("Cannot call ipc___RecordBatchStreamReader__Open(). Please use arrow::install_arrow() to install required runtime libraries. ");
}
#endif

// recordbatchreader.cpp
#if defined(ARROW_R_WITH_ARROW)
std::vector<std::shared_ptr<arrow::RecordBatch>> ipc___RecordBatchStreamReader__batches(const std::shared_ptr<arrow::ipc::RecordBatchStreamReader>& reader);
RcppExport SEXP _arrow_ipc___RecordBatchStreamReader__batches(SEXP reader_sexp){
BEGIN_RCPP
	Rcpp::traits::input_parameter<const std::shared_ptr<arrow::ipc::RecordBatchStreamReader>&>::type reader(reader_sexp);
	return Rcpp::wrap(ipc___RecordBatchStreamReader__batches(reader));
END_RCPP
}
#else
RcppExport SEXP _arrow_ipc___RecordBatchStreamReader__batches(SEXP reader_sexp){
	Rf_error("Cannot call ipc___RecordBatchStreamReader__batches(). Please use arrow::install_arrow() to install required runtime libraries. ");
}
#endif

// recordbatchreader.cpp
#if defined(ARROW_R_WITH_ARROW)
std::shared_ptr<arrow::Schema> ipc___RecordBatchFileReader__schema(const std::shared_ptr<arrow::ipc::RecordBatchFileReader>& reader);
RcppExport SEXP _arrow_ipc___RecordBatchFileReader__schema(SEXP reader_sexp){
BEGIN_RCPP
	Rcpp::traits::input_parameter<const std::shared_ptr<arrow::ipc::RecordBatchFileReader>&>::type reader(reader_sexp);
	return Rcpp::wrap(ipc___RecordBatchFileReader__schema(reader));
END_RCPP
}
#else
RcppExport SEXP _arrow_ipc___RecordBatchFileReader__schema(SEXP reader_sexp){
	Rf_error("Cannot call ipc___RecordBatchFileReader__schema(). Please use arrow::install_arrow() to install required runtime libraries. ");
}
#endif

// recordbatchreader.cpp
#if defined(ARROW_R_WITH_ARROW)
int ipc___RecordBatchFileReader__num_record_batches(const std::shared_ptr<arrow::ipc::RecordBatchFileReader>& reader);
RcppExport SEXP _arrow_ipc___RecordBatchFileReader__num_record_batches(SEXP reader_sexp){
BEGIN_RCPP
	Rcpp::traits::input_parameter<const std::shared_ptr<arrow::ipc::RecordBatchFileReader>&>::type reader(reader_sexp);
	return Rcpp::wrap(ipc___RecordBatchFileReader__num_record_batches(reader));
END_RCPP
}
#else
RcppExport SEXP _arrow_ipc___RecordBatchFileReader__num_record_batches(SEXP reader_sexp){
	Rf_error("Cannot call ipc___RecordBatchFileReader__num_record_batches(). Please use arrow::install_arrow() to install required runtime libraries. ");
}
#endif

// recordbatchreader.cpp
#if defined(ARROW_R_WITH_ARROW)
std::shared_ptr<arrow::RecordBatch> ipc___RecordBatchFileReader__ReadRecordBatch(const std::shared_ptr<arrow::ipc::RecordBatchFileReader>& reader, int i);
RcppExport SEXP _arrow_ipc___RecordBatchFileReader__ReadRecordBatch(SEXP reader_sexp, SEXP i_sexp){
BEGIN_RCPP
	Rcpp::traits::input_parameter<const std::shared_ptr<arrow::ipc::RecordBatchFileReader>&>::type reader(reader_sexp);
	Rcpp::traits::input_parameter<int>::type i(i_sexp);
	return Rcpp::wrap(ipc___RecordBatchFileReader__ReadRecordBatch(reader, i));
END_RCPP
}
#else
RcppExport SEXP _arrow_ipc___RecordBatchFileReader__ReadRecordBatch(SEXP reader_sexp, SEXP i_sexp){
	Rf_error("Cannot call ipc___RecordBatchFileReader__ReadRecordBatch(). Please use arrow::install_arrow() to install required runtime libraries. ");
}
#endif

// recordbatchreader.cpp
#if defined(ARROW_R_WITH_ARROW)
std::shared_ptr<arrow::ipc::RecordBatchFileReader> ipc___RecordBatchFileReader__Open(const std::shared_ptr<arrow::io::RandomAccessFile>& file);
RcppExport SEXP _arrow_ipc___RecordBatchFileReader__Open(SEXP file_sexp){
BEGIN_RCPP
	Rcpp::traits::input_parameter<const std::shared_ptr<arrow::io::RandomAccessFile>&>::type file(file_sexp);
	return Rcpp::wrap(ipc___RecordBatchFileReader__Open(file));
END_RCPP
}
#else
RcppExport SEXP _arrow_ipc___RecordBatchFileReader__Open(SEXP file_sexp){
	Rf_error("Cannot call ipc___RecordBatchFileReader__Open(). Please use arrow::install_arrow() to install required runtime libraries. ");
}
#endif

// recordbatchreader.cpp
#if defined(ARROW_R_WITH_ARROW)
std::shared_ptr<arrow::Table> Table__from_RecordBatchFileReader(const std::shared_ptr<arrow::ipc::RecordBatchFileReader>& reader);
RcppExport SEXP _arrow_Table__from_RecordBatchFileReader(SEXP reader_sexp){
BEGIN_RCPP
	Rcpp::traits::input_parameter<const std::shared_ptr<arrow::ipc::RecordBatchFileReader>&>::type reader(reader_sexp);
	return Rcpp::wrap(Table__from_RecordBatchFileReader(reader));
END_RCPP
}
#else
RcppExport SEXP _arrow_Table__from_RecordBatchFileReader(SEXP reader_sexp){
	Rf_error("Cannot call Table__from_RecordBatchFileReader(). Please use arrow::install_arrow() to install required runtime libraries. ");
}
#endif

// recordbatchreader.cpp
#if defined(ARROW_R_WITH_ARROW)
std::shared_ptr<arrow::Table> Table__from_RecordBatchStreamReader(const std::shared_ptr<arrow::ipc::RecordBatchStreamReader>& reader);
RcppExport SEXP _arrow_Table__from_RecordBatchStreamReader(SEXP reader_sexp){
BEGIN_RCPP
	Rcpp::traits::input_parameter<const std::shared_ptr<arrow::ipc::RecordBatchStreamReader>&>::type reader(reader_sexp);
	return Rcpp::wrap(Table__from_RecordBatchStreamReader(reader));
END_RCPP
}
#else
RcppExport SEXP _arrow_Table__from_RecordBatchStreamReader(SEXP reader_sexp){
	Rf_error("Cannot call Table__from_RecordBatchStreamReader(). Please use arrow::install_arrow() to install required runtime libraries. ");
}
#endif

// recordbatchreader.cpp
#if defined(ARROW_R_WITH_ARROW)
std::vector<std::shared_ptr<arrow::RecordBatch>> ipc___RecordBatchFileReader__batches(const std::shared_ptr<arrow::ipc::RecordBatchFileReader>& reader);
RcppExport SEXP _arrow_ipc___RecordBatchFileReader__batches(SEXP reader_sexp){
BEGIN_RCPP
	Rcpp::traits::input_parameter<const std::shared_ptr<arrow::ipc::RecordBatchFileReader>&>::type reader(reader_sexp);
	return Rcpp::wrap(ipc___RecordBatchFileReader__batches(reader));
END_RCPP
}
#else
RcppExport SEXP _arrow_ipc___RecordBatchFileReader__batches(SEXP reader_sexp){
	Rf_error("Cannot call ipc___RecordBatchFileReader__batches(). Please use arrow::install_arrow() to install required runtime libraries. ");
}
#endif

// recordbatchwriter.cpp
#if defined(ARROW_R_WITH_ARROW)
void ipc___RecordBatchWriter__WriteRecordBatch(const std::shared_ptr<arrow::ipc::RecordBatchWriter>& batch_writer, const std::shared_ptr<arrow::RecordBatch>& batch);
RcppExport SEXP _arrow_ipc___RecordBatchWriter__WriteRecordBatch(SEXP batch_writer_sexp, SEXP batch_sexp){
BEGIN_RCPP
	Rcpp::traits::input_parameter<const std::shared_ptr<arrow::ipc::RecordBatchWriter>&>::type batch_writer(batch_writer_sexp);
	Rcpp::traits::input_parameter<const std::shared_ptr<arrow::RecordBatch>&>::type batch(batch_sexp);
	ipc___RecordBatchWriter__WriteRecordBatch(batch_writer, batch);
	return R_NilValue;
END_RCPP
}
#else
RcppExport SEXP _arrow_ipc___RecordBatchWriter__WriteRecordBatch(SEXP batch_writer_sexp, SEXP batch_sexp){
	Rf_error("Cannot call ipc___RecordBatchWriter__WriteRecordBatch(). Please use arrow::install_arrow() to install required runtime libraries. ");
}
#endif

// recordbatchwriter.cpp
#if defined(ARROW_R_WITH_ARROW)
void ipc___RecordBatchWriter__WriteTable(const std::shared_ptr<arrow::ipc::RecordBatchWriter>& batch_writer, const std::shared_ptr<arrow::Table>& table);
RcppExport SEXP _arrow_ipc___RecordBatchWriter__WriteTable(SEXP batch_writer_sexp, SEXP table_sexp){
BEGIN_RCPP
	Rcpp::traits::input_parameter<const std::shared_ptr<arrow::ipc::RecordBatchWriter>&>::type batch_writer(batch_writer_sexp);
	Rcpp::traits::input_parameter<const std::shared_ptr<arrow::Table>&>::type table(table_sexp);
	ipc___RecordBatchWriter__WriteTable(batch_writer, table);
	return R_NilValue;
END_RCPP
}
#else
RcppExport SEXP _arrow_ipc___RecordBatchWriter__WriteTable(SEXP batch_writer_sexp, SEXP table_sexp){
	Rf_error("Cannot call ipc___RecordBatchWriter__WriteTable(). Please use arrow::install_arrow() to install required runtime libraries. ");
}
#endif

// recordbatchwriter.cpp
#if defined(ARROW_R_WITH_ARROW)
void ipc___RecordBatchWriter__Close(const std::shared_ptr<arrow::ipc::RecordBatchWriter>& batch_writer);
RcppExport SEXP _arrow_ipc___RecordBatchWriter__Close(SEXP batch_writer_sexp){
BEGIN_RCPP
	Rcpp::traits::input_parameter<const std::shared_ptr<arrow::ipc::RecordBatchWriter>&>::type batch_writer(batch_writer_sexp);
	ipc___RecordBatchWriter__Close(batch_writer);
	return R_NilValue;
END_RCPP
}
#else
RcppExport SEXP _arrow_ipc___RecordBatchWriter__Close(SEXP batch_writer_sexp){
	Rf_error("Cannot call ipc___RecordBatchWriter__Close(). Please use arrow::install_arrow() to install required runtime libraries. ");
}
#endif

// recordbatchwriter.cpp
#if defined(ARROW_R_WITH_ARROW)
std::shared_ptr<arrow::ipc::RecordBatchWriter> ipc___RecordBatchFileWriter__Open(const std::shared_ptr<arrow::io::OutputStream>& stream, const std::shared_ptr<arrow::Schema>& schema);
RcppExport SEXP _arrow_ipc___RecordBatchFileWriter__Open(SEXP stream_sexp, SEXP schema_sexp){
BEGIN_RCPP
	Rcpp::traits::input_parameter<const std::shared_ptr<arrow::io::OutputStream>&>::type stream(stream_sexp);
	Rcpp::traits::input_parameter<const std::shared_ptr<arrow::Schema>&>::type schema(schema_sexp);
	return Rcpp::wrap(ipc___RecordBatchFileWriter__Open(stream, schema));
END_RCPP
}
#else
RcppExport SEXP _arrow_ipc___RecordBatchFileWriter__Open(SEXP stream_sexp, SEXP schema_sexp){
	Rf_error("Cannot call ipc___RecordBatchFileWriter__Open(). Please use arrow::install_arrow() to install required runtime libraries. ");
}
#endif

// recordbatchwriter.cpp
#if defined(ARROW_R_WITH_ARROW)
std::shared_ptr<arrow::ipc::RecordBatchWriter> ipc___RecordBatchStreamWriter__Open(const std::shared_ptr<arrow::io::OutputStream>& stream, const std::shared_ptr<arrow::Schema>& schema);
RcppExport SEXP _arrow_ipc___RecordBatchStreamWriter__Open(SEXP stream_sexp, SEXP schema_sexp){
BEGIN_RCPP
	Rcpp::traits::input_parameter<const std::shared_ptr<arrow::io::OutputStream>&>::type stream(stream_sexp);
	Rcpp::traits::input_parameter<const std::shared_ptr<arrow::Schema>&>::type schema(schema_sexp);
	return Rcpp::wrap(ipc___RecordBatchStreamWriter__Open(stream, schema));
END_RCPP
}
#else
RcppExport SEXP _arrow_ipc___RecordBatchStreamWriter__Open(SEXP stream_sexp, SEXP schema_sexp){
	Rf_error("Cannot call ipc___RecordBatchStreamWriter__Open(). Please use arrow::install_arrow() to install required runtime libraries. ");
}
#endif

// schema.cpp
#if defined(ARROW_R_WITH_ARROW)
std::shared_ptr<arrow::Schema> schema_(Rcpp::List fields);
RcppExport SEXP _arrow_schema_(SEXP fields_sexp){
BEGIN_RCPP
	Rcpp::traits::input_parameter<Rcpp::List>::type fields(fields_sexp);
	return Rcpp::wrap(schema_(fields));
END_RCPP
}
#else
RcppExport SEXP _arrow_schema_(SEXP fields_sexp){
	Rf_error("Cannot call schema_(). Please use arrow::install_arrow() to install required runtime libraries. ");
}
#endif

// schema.cpp
#if defined(ARROW_R_WITH_ARROW)
std::string Schema__ToString(const std::shared_ptr<arrow::Schema>& s);
RcppExport SEXP _arrow_Schema__ToString(SEXP s_sexp){
BEGIN_RCPP
	Rcpp::traits::input_parameter<const std::shared_ptr<arrow::Schema>&>::type s(s_sexp);
	return Rcpp::wrap(Schema__ToString(s));
END_RCPP
}
#else
RcppExport SEXP _arrow_Schema__ToString(SEXP s_sexp){
	Rf_error("Cannot call Schema__ToString(). Please use arrow::install_arrow() to install required runtime libraries. ");
}
#endif

// schema.cpp
#if defined(ARROW_R_WITH_ARROW)
int Schema__num_fields(const std::shared_ptr<arrow::Schema>& s);
RcppExport SEXP _arrow_Schema__num_fields(SEXP s_sexp){
BEGIN_RCPP
	Rcpp::traits::input_parameter<const std::shared_ptr<arrow::Schema>&>::type s(s_sexp);
	return Rcpp::wrap(Schema__num_fields(s));
END_RCPP
}
#else
RcppExport SEXP _arrow_Schema__num_fields(SEXP s_sexp){
	Rf_error("Cannot call Schema__num_fields(). Please use arrow::install_arrow() to install required runtime libraries. ");
}
#endif

// schema.cpp
#if defined(ARROW_R_WITH_ARROW)
std::shared_ptr<arrow::Field> Schema__field(const std::shared_ptr<arrow::Schema>& s, int i);
RcppExport SEXP _arrow_Schema__field(SEXP s_sexp, SEXP i_sexp){
BEGIN_RCPP
	Rcpp::traits::input_parameter<const std::shared_ptr<arrow::Schema>&>::type s(s_sexp);
	Rcpp::traits::input_parameter<int>::type i(i_sexp);
	return Rcpp::wrap(Schema__field(s, i));
END_RCPP
}
#else
RcppExport SEXP _arrow_Schema__field(SEXP s_sexp, SEXP i_sexp){
	Rf_error("Cannot call Schema__field(). Please use arrow::install_arrow() to install required runtime libraries. ");
}
#endif

// schema.cpp
#if defined(ARROW_R_WITH_ARROW)
Rcpp::CharacterVector Schema__names(const std::shared_ptr<arrow::Schema>& schema);
RcppExport SEXP _arrow_Schema__names(SEXP schema_sexp){
BEGIN_RCPP
	Rcpp::traits::input_parameter<const std::shared_ptr<arrow::Schema>&>::type schema(schema_sexp);
	return Rcpp::wrap(Schema__names(schema));
END_RCPP
}
#else
RcppExport SEXP _arrow_Schema__names(SEXP schema_sexp){
	Rf_error("Cannot call Schema__names(). Please use arrow::install_arrow() to install required runtime libraries. ");
}
#endif

// schema.cpp
#if defined(ARROW_R_WITH_ARROW)
Rcpp::RawVector Schema__serialize(const std::shared_ptr<arrow::Schema>& schema);
RcppExport SEXP _arrow_Schema__serialize(SEXP schema_sexp){
BEGIN_RCPP
	Rcpp::traits::input_parameter<const std::shared_ptr<arrow::Schema>&>::type schema(schema_sexp);
	return Rcpp::wrap(Schema__serialize(schema));
END_RCPP
}
#else
RcppExport SEXP _arrow_Schema__serialize(SEXP schema_sexp){
	Rf_error("Cannot call Schema__serialize(). Please use arrow::install_arrow() to install required runtime libraries. ");
}
#endif

// schema.cpp
#if defined(ARROW_R_WITH_ARROW)
bool Schema__Equals(const std::shared_ptr<arrow::Schema>& schema, const std::shared_ptr<arrow::Schema>& other, bool check_metadata);
RcppExport SEXP _arrow_Schema__Equals(SEXP schema_sexp, SEXP other_sexp, SEXP check_metadata_sexp){
BEGIN_RCPP
	Rcpp::traits::input_parameter<const std::shared_ptr<arrow::Schema>&>::type schema(schema_sexp);
	Rcpp::traits::input_parameter<const std::shared_ptr<arrow::Schema>&>::type other(other_sexp);
	Rcpp::traits::input_parameter<bool>::type check_metadata(check_metadata_sexp);
	return Rcpp::wrap(Schema__Equals(schema, other, check_metadata));
END_RCPP
}
#else
RcppExport SEXP _arrow_Schema__Equals(SEXP schema_sexp, SEXP other_sexp, SEXP check_metadata_sexp){
	Rf_error("Cannot call Schema__Equals(). Please use arrow::install_arrow() to install required runtime libraries. ");
}
#endif

// table.cpp
#if defined(ARROW_R_WITH_ARROW)
std::shared_ptr<arrow::Table> Table__from_dataframe(DataFrame tbl);
RcppExport SEXP _arrow_Table__from_dataframe(SEXP tbl_sexp){
BEGIN_RCPP
	Rcpp::traits::input_parameter<DataFrame>::type tbl(tbl_sexp);
	return Rcpp::wrap(Table__from_dataframe(tbl));
END_RCPP
}
#else
RcppExport SEXP _arrow_Table__from_dataframe(SEXP tbl_sexp){
	Rf_error("Cannot call Table__from_dataframe(). Please use arrow::install_arrow() to install required runtime libraries. ");
}
#endif

// table.cpp
#if defined(ARROW_R_WITH_ARROW)
int Table__num_columns(const std::shared_ptr<arrow::Table>& x);
RcppExport SEXP _arrow_Table__num_columns(SEXP x_sexp){
BEGIN_RCPP
	Rcpp::traits::input_parameter<const std::shared_ptr<arrow::Table>&>::type x(x_sexp);
	return Rcpp::wrap(Table__num_columns(x));
END_RCPP
}
#else
RcppExport SEXP _arrow_Table__num_columns(SEXP x_sexp){
	Rf_error("Cannot call Table__num_columns(). Please use arrow::install_arrow() to install required runtime libraries. ");
}
#endif

// table.cpp
#if defined(ARROW_R_WITH_ARROW)
int Table__num_rows(const std::shared_ptr<arrow::Table>& x);
RcppExport SEXP _arrow_Table__num_rows(SEXP x_sexp){
BEGIN_RCPP
	Rcpp::traits::input_parameter<const std::shared_ptr<arrow::Table>&>::type x(x_sexp);
	return Rcpp::wrap(Table__num_rows(x));
END_RCPP
}
#else
RcppExport SEXP _arrow_Table__num_rows(SEXP x_sexp){
	Rf_error("Cannot call Table__num_rows(). Please use arrow::install_arrow() to install required runtime libraries. ");
}
#endif

// table.cpp
#if defined(ARROW_R_WITH_ARROW)
std::shared_ptr<arrow::Schema> Table__schema(const std::shared_ptr<arrow::Table>& x);
RcppExport SEXP _arrow_Table__schema(SEXP x_sexp){
BEGIN_RCPP
	Rcpp::traits::input_parameter<const std::shared_ptr<arrow::Table>&>::type x(x_sexp);
	return Rcpp::wrap(Table__schema(x));
END_RCPP
}
#else
RcppExport SEXP _arrow_Table__schema(SEXP x_sexp){
	Rf_error("Cannot call Table__schema(). Please use arrow::install_arrow() to install required runtime libraries. ");
}
#endif

// table.cpp
#if defined(ARROW_R_WITH_ARROW)
std::shared_ptr<arrow::Column> Table__column(const std::shared_ptr<arrow::Table>& table, int i);
RcppExport SEXP _arrow_Table__column(SEXP table_sexp, SEXP i_sexp){
BEGIN_RCPP
	Rcpp::traits::input_parameter<const std::shared_ptr<arrow::Table>&>::type table(table_sexp);
	Rcpp::traits::input_parameter<int>::type i(i_sexp);
	return Rcpp::wrap(Table__column(table, i));
END_RCPP
}
#else
RcppExport SEXP _arrow_Table__column(SEXP table_sexp, SEXP i_sexp){
	Rf_error("Cannot call Table__column(). Please use arrow::install_arrow() to install required runtime libraries. ");
}
#endif

// table.cpp
#if defined(ARROW_R_WITH_ARROW)
std::vector<std::shared_ptr<arrow::Column>> Table__columns(const std::shared_ptr<arrow::Table>& table);
RcppExport SEXP _arrow_Table__columns(SEXP table_sexp){
BEGIN_RCPP
	Rcpp::traits::input_parameter<const std::shared_ptr<arrow::Table>&>::type table(table_sexp);
	return Rcpp::wrap(Table__columns(table));
END_RCPP
}
#else
RcppExport SEXP _arrow_Table__columns(SEXP table_sexp){
	Rf_error("Cannot call Table__columns(). Please use arrow::install_arrow() to install required runtime libraries. ");
}
#endif

// table.cpp
#if defined(ARROW_R_WITH_ARROW)
Rcpp::CharacterVector Table__column_names(const std::shared_ptr<arrow::Table>& table);
RcppExport SEXP _arrow_Table__column_names(SEXP table_sexp){
BEGIN_RCPP
	Rcpp::traits::input_parameter<const std::shared_ptr<arrow::Table>&>::type table(table_sexp);
	return Rcpp::wrap(Table__column_names(table));
END_RCPP
}
#else
RcppExport SEXP _arrow_Table__column_names(SEXP table_sexp){
	Rf_error("Cannot call Table__column_names(). Please use arrow::install_arrow() to install required runtime libraries. ");
}
#endif

// table.cpp
#if defined(ARROW_R_WITH_ARROW)
std::shared_ptr<arrow::Table> Table__select(const std::shared_ptr<arrow::Table>& table, const Rcpp::IntegerVector& indices);
RcppExport SEXP _arrow_Table__select(SEXP table_sexp, SEXP indices_sexp){
BEGIN_RCPP
	Rcpp::traits::input_parameter<const std::shared_ptr<arrow::Table>&>::type table(table_sexp);
	Rcpp::traits::input_parameter<const Rcpp::IntegerVector&>::type indices(indices_sexp);
	return Rcpp::wrap(Table__select(table, indices));
END_RCPP
}
#else
RcppExport SEXP _arrow_Table__select(SEXP table_sexp, SEXP indices_sexp){
	Rf_error("Cannot call Table__select(). Please use arrow::install_arrow() to install required runtime libraries. ");
}
#endif

// table.cpp
#if defined(ARROW_R_WITH_ARROW)
std::shared_ptr<arrow::Table> Table__from_dots(SEXP lst, SEXP schema_sxp);
RcppExport SEXP _arrow_Table__from_dots(SEXP lst_sexp, SEXP schema_sxp_sexp){
BEGIN_RCPP
	Rcpp::traits::input_parameter<SEXP>::type lst(lst_sexp);
	Rcpp::traits::input_parameter<SEXP>::type schema_sxp(schema_sxp_sexp);
	return Rcpp::wrap(Table__from_dots(lst, schema_sxp));
END_RCPP
}
#else
RcppExport SEXP _arrow_Table__from_dots(SEXP lst_sexp, SEXP schema_sxp_sexp){
	Rf_error("Cannot call Table__from_dots(). Please use arrow::install_arrow() to install required runtime libraries. ");
}
#endif

// threadpool.cpp
#if defined(ARROW_R_WITH_ARROW)
int GetCpuThreadPoolCapacity();
RcppExport SEXP _arrow_GetCpuThreadPoolCapacity(){
BEGIN_RCPP
	return Rcpp::wrap(GetCpuThreadPoolCapacity());
END_RCPP
}
#else
RcppExport SEXP _arrow_GetCpuThreadPoolCapacity(){
	Rf_error("Cannot call GetCpuThreadPoolCapacity(). Please use arrow::install_arrow() to install required runtime libraries. ");
}
#endif

// threadpool.cpp
#if defined(ARROW_R_WITH_ARROW)
void SetCpuThreadPoolCapacity(int threads);
RcppExport SEXP _arrow_SetCpuThreadPoolCapacity(SEXP threads_sexp){
BEGIN_RCPP
	Rcpp::traits::input_parameter<int>::type threads(threads_sexp);
	SetCpuThreadPoolCapacity(threads);
	return R_NilValue;
END_RCPP
}
#else
RcppExport SEXP _arrow_SetCpuThreadPoolCapacity(SEXP threads_sexp){
	Rf_error("Cannot call SetCpuThreadPoolCapacity(). Please use arrow::install_arrow() to install required runtime libraries. ");
}
#endif


extern "C" SEXP _arrow_available() {
return Rf_ScalarLogical(
#if defined(ARROW_R_WITH_ARROW)
  TRUE
#else
  FALSE
#endif
);
}

static const R_CallMethodDef CallEntries[] = {
		{ "_arrow_available", (DL_FUNC)& _arrow_available, 0 },
		{ "_arrow_Array__Slice1", (DL_FUNC) &_arrow_Array__Slice1, 2}, 
		{ "_arrow_Array__Slice2", (DL_FUNC) &_arrow_Array__Slice2, 3}, 
		{ "_arrow_Array__IsNull", (DL_FUNC) &_arrow_Array__IsNull, 2}, 
		{ "_arrow_Array__IsValid", (DL_FUNC) &_arrow_Array__IsValid, 2}, 
		{ "_arrow_Array__length", (DL_FUNC) &_arrow_Array__length, 1}, 
		{ "_arrow_Array__offset", (DL_FUNC) &_arrow_Array__offset, 1}, 
		{ "_arrow_Array__null_count", (DL_FUNC) &_arrow_Array__null_count, 1}, 
		{ "_arrow_Array__type", (DL_FUNC) &_arrow_Array__type, 1}, 
		{ "_arrow_Array__ToString", (DL_FUNC) &_arrow_Array__ToString, 1}, 
		{ "_arrow_Array__type_id", (DL_FUNC) &_arrow_Array__type_id, 1}, 
		{ "_arrow_Array__Equals", (DL_FUNC) &_arrow_Array__Equals, 2}, 
		{ "_arrow_Array__ApproxEquals", (DL_FUNC) &_arrow_Array__ApproxEquals, 2}, 
		{ "_arrow_Array__data", (DL_FUNC) &_arrow_Array__data, 1}, 
		{ "_arrow_Array__RangeEquals", (DL_FUNC) &_arrow_Array__RangeEquals, 5}, 
		{ "_arrow_Array__Mask", (DL_FUNC) &_arrow_Array__Mask, 1}, 
		{ "_arrow_DictionaryArray__indices", (DL_FUNC) &_arrow_DictionaryArray__indices, 1}, 
		{ "_arrow_DictionaryArray__dictionary", (DL_FUNC) &_arrow_DictionaryArray__dictionary, 1}, 
		{ "_arrow_StructArray__field", (DL_FUNC) &_arrow_StructArray__field, 2}, 
		{ "_arrow_StructArray__GetFieldByName", (DL_FUNC) &_arrow_StructArray__GetFieldByName, 2}, 
		{ "_arrow_StructArray__Flatten", (DL_FUNC) &_arrow_StructArray__Flatten, 1}, 
		{ "_arrow_ListArray__value_type", (DL_FUNC) &_arrow_ListArray__value_type, 1}, 
		{ "_arrow_ListArray__values", (DL_FUNC) &_arrow_ListArray__values, 1}, 
		{ "_arrow_ListArray__value_length", (DL_FUNC) &_arrow_ListArray__value_length, 2}, 
		{ "_arrow_ListArray__value_offset", (DL_FUNC) &_arrow_ListArray__value_offset, 2}, 
		{ "_arrow_ListArray__raw_value_offsets", (DL_FUNC) &_arrow_ListArray__raw_value_offsets, 1}, 
		{ "_arrow_Array__as_vector", (DL_FUNC) &_arrow_Array__as_vector, 1}, 
		{ "_arrow_ChunkedArray__as_vector", (DL_FUNC) &_arrow_ChunkedArray__as_vector, 1}, 
		{ "_arrow_RecordBatch__to_dataframe", (DL_FUNC) &_arrow_RecordBatch__to_dataframe, 2}, 
		{ "_arrow_Table__to_dataframe", (DL_FUNC) &_arrow_Table__to_dataframe, 2}, 
		{ "_arrow_Array__infer_type", (DL_FUNC) &_arrow_Array__infer_type, 1}, 
		{ "_arrow_Array__from_vector", (DL_FUNC) &_arrow_Array__from_vector, 2}, 
		{ "_arrow_ChunkedArray__from_list", (DL_FUNC) &_arrow_ChunkedArray__from_list, 2}, 
		{ "_arrow_ArrayData__get_type", (DL_FUNC) &_arrow_ArrayData__get_type, 1}, 
		{ "_arrow_ArrayData__get_length", (DL_FUNC) &_arrow_ArrayData__get_length, 1}, 
		{ "_arrow_ArrayData__get_null_count", (DL_FUNC) &_arrow_ArrayData__get_null_count, 1}, 
		{ "_arrow_ArrayData__get_offset", (DL_FUNC) &_arrow_ArrayData__get_offset, 1}, 
		{ "_arrow_ArrayData__buffers", (DL_FUNC) &_arrow_ArrayData__buffers, 1}, 
		{ "_arrow_Buffer__is_mutable", (DL_FUNC) &_arrow_Buffer__is_mutable, 1}, 
		{ "_arrow_Buffer__ZeroPadding", (DL_FUNC) &_arrow_Buffer__ZeroPadding, 1}, 
		{ "_arrow_Buffer__capacity", (DL_FUNC) &_arrow_Buffer__capacity, 1}, 
		{ "_arrow_Buffer__size", (DL_FUNC) &_arrow_Buffer__size, 1}, 
		{ "_arrow_r___RBuffer__initialize", (DL_FUNC) &_arrow_r___RBuffer__initialize, 1}, 
		{ "_arrow_Buffer__data", (DL_FUNC) &_arrow_Buffer__data, 1}, 
		{ "_arrow_ChunkedArray__length", (DL_FUNC) &_arrow_ChunkedArray__length, 1}, 
		{ "_arrow_ChunkedArray__null_count", (DL_FUNC) &_arrow_ChunkedArray__null_count, 1}, 
		{ "_arrow_ChunkedArray__num_chunks", (DL_FUNC) &_arrow_ChunkedArray__num_chunks, 1}, 
		{ "_arrow_ChunkedArray__chunk", (DL_FUNC) &_arrow_ChunkedArray__chunk, 2}, 
		{ "_arrow_ChunkedArray__chunks", (DL_FUNC) &_arrow_ChunkedArray__chunks, 1}, 
		{ "_arrow_ChunkedArray__type", (DL_FUNC) &_arrow_ChunkedArray__type, 1}, 
		{ "_arrow_ChunkArray__Slice1", (DL_FUNC) &_arrow_ChunkArray__Slice1, 2}, 
		{ "_arrow_ChunkArray__Slice2", (DL_FUNC) &_arrow_ChunkArray__Slice2, 3}, 
		{ "_arrow_Column__length", (DL_FUNC) &_arrow_Column__length, 1}, 
		{ "_arrow_Column__null_count", (DL_FUNC) &_arrow_Column__null_count, 1}, 
		{ "_arrow_Column__type", (DL_FUNC) &_arrow_Column__type, 1}, 
		{ "_arrow_Column__data", (DL_FUNC) &_arrow_Column__data, 1}, 
		{ "_arrow_util___Codec__Create", (DL_FUNC) &_arrow_util___Codec__Create, 1}, 
		{ "_arrow_io___CompressedOutputStream__Make", (DL_FUNC) &_arrow_io___CompressedOutputStream__Make, 2}, 
		{ "_arrow_io___CompressedInputStream__Make", (DL_FUNC) &_arrow_io___CompressedInputStream__Make, 2}, 
		{ "_arrow_compute___CastOptions__initialize", (DL_FUNC) &_arrow_compute___CastOptions__initialize, 3}, 
		{ "_arrow_Array__cast", (DL_FUNC) &_arrow_Array__cast, 3}, 
		{ "_arrow_ChunkedArray__cast", (DL_FUNC) &_arrow_ChunkedArray__cast, 3}, 
		{ "_arrow_RecordBatch__cast", (DL_FUNC) &_arrow_RecordBatch__cast, 3}, 
		{ "_arrow_Table__cast", (DL_FUNC) &_arrow_Table__cast, 3}, 
		{ "_arrow_csv___ReadOptions__initialize", (DL_FUNC) &_arrow_csv___ReadOptions__initialize, 1}, 
		{ "_arrow_csv___ParseOptions__initialize", (DL_FUNC) &_arrow_csv___ParseOptions__initialize, 1}, 
		{ "_arrow_csv___ConvertOptions__initialize", (DL_FUNC) &_arrow_csv___ConvertOptions__initialize, 1}, 
		{ "_arrow_csv___TableReader__Make", (DL_FUNC) &_arrow_csv___TableReader__Make, 4}, 
		{ "_arrow_csv___TableReader__Read", (DL_FUNC) &_arrow_csv___TableReader__Read, 1}, 
		{ "_arrow_shared_ptr_is_null", (DL_FUNC) &_arrow_shared_ptr_is_null, 1}, 
		{ "_arrow_unique_ptr_is_null", (DL_FUNC) &_arrow_unique_ptr_is_null, 1}, 
		{ "_arrow_Int8__initialize", (DL_FUNC) &_arrow_Int8__initialize, 0}, 
		{ "_arrow_Int16__initialize", (DL_FUNC) &_arrow_Int16__initialize, 0}, 
		{ "_arrow_Int32__initialize", (DL_FUNC) &_arrow_Int32__initialize, 0}, 
		{ "_arrow_Int64__initialize", (DL_FUNC) &_arrow_Int64__initialize, 0}, 
		{ "_arrow_UInt8__initialize", (DL_FUNC) &_arrow_UInt8__initialize, 0}, 
		{ "_arrow_UInt16__initialize", (DL_FUNC) &_arrow_UInt16__initialize, 0}, 
		{ "_arrow_UInt32__initialize", (DL_FUNC) &_arrow_UInt32__initialize, 0}, 
		{ "_arrow_UInt64__initialize", (DL_FUNC) &_arrow_UInt64__initialize, 0}, 
		{ "_arrow_Float16__initialize", (DL_FUNC) &_arrow_Float16__initialize, 0}, 
		{ "_arrow_Float32__initialize", (DL_FUNC) &_arrow_Float32__initialize, 0}, 
		{ "_arrow_Float64__initialize", (DL_FUNC) &_arrow_Float64__initialize, 0}, 
		{ "_arrow_Boolean__initialize", (DL_FUNC) &_arrow_Boolean__initialize, 0}, 
		{ "_arrow_Utf8__initialize", (DL_FUNC) &_arrow_Utf8__initialize, 0}, 
		{ "_arrow_Date32__initialize", (DL_FUNC) &_arrow_Date32__initialize, 0}, 
		{ "_arrow_Date64__initialize", (DL_FUNC) &_arrow_Date64__initialize, 0}, 
		{ "_arrow_Null__initialize", (DL_FUNC) &_arrow_Null__initialize, 0}, 
		{ "_arrow_Decimal128Type__initialize", (DL_FUNC) &_arrow_Decimal128Type__initialize, 2}, 
		{ "_arrow_FixedSizeBinary__initialize", (DL_FUNC) &_arrow_FixedSizeBinary__initialize, 1}, 
		{ "_arrow_Timestamp__initialize1", (DL_FUNC) &_arrow_Timestamp__initialize1, 1}, 
		{ "_arrow_Timestamp__initialize2", (DL_FUNC) &_arrow_Timestamp__initialize2, 2}, 
		{ "_arrow_Time32__initialize", (DL_FUNC) &_arrow_Time32__initialize, 1}, 
		{ "_arrow_Time64__initialize", (DL_FUNC) &_arrow_Time64__initialize, 1}, 
		{ "_arrow_list__", (DL_FUNC) &_arrow_list__, 1}, 
		{ "_arrow_struct_", (DL_FUNC) &_arrow_struct_, 1}, 
		{ "_arrow_DataType__ToString", (DL_FUNC) &_arrow_DataType__ToString, 1}, 
		{ "_arrow_DataType__name", (DL_FUNC) &_arrow_DataType__name, 1}, 
		{ "_arrow_DataType__Equals", (DL_FUNC) &_arrow_DataType__Equals, 2}, 
		{ "_arrow_DataType__num_children", (DL_FUNC) &_arrow_DataType__num_children, 1}, 
		{ "_arrow_DataType__children_pointer", (DL_FUNC) &_arrow_DataType__children_pointer, 1}, 
		{ "_arrow_DataType__id", (DL_FUNC) &_arrow_DataType__id, 1}, 
		{ "_arrow_ListType__ToString", (DL_FUNC) &_arrow_ListType__ToString, 1}, 
		{ "_arrow_FixedWidthType__bit_width", (DL_FUNC) &_arrow_FixedWidthType__bit_width, 1}, 
		{ "_arrow_DateType__unit", (DL_FUNC) &_arrow_DateType__unit, 1}, 
		{ "_arrow_TimeType__unit", (DL_FUNC) &_arrow_TimeType__unit, 1}, 
		{ "_arrow_DecimalType__precision", (DL_FUNC) &_arrow_DecimalType__precision, 1}, 
		{ "_arrow_DecimalType__scale", (DL_FUNC) &_arrow_DecimalType__scale, 1}, 
		{ "_arrow_TimestampType__timezone", (DL_FUNC) &_arrow_TimestampType__timezone, 1}, 
		{ "_arrow_TimestampType__unit", (DL_FUNC) &_arrow_TimestampType__unit, 1}, 
		{ "_arrow_DictionaryType__initialize", (DL_FUNC) &_arrow_DictionaryType__initialize, 3}, 
		{ "_arrow_DictionaryType__index_type", (DL_FUNC) &_arrow_DictionaryType__index_type, 1}, 
		{ "_arrow_DictionaryType__value_type", (DL_FUNC) &_arrow_DictionaryType__value_type, 1}, 
		{ "_arrow_DictionaryType__name", (DL_FUNC) &_arrow_DictionaryType__name, 1}, 
		{ "_arrow_DictionaryType__ordered", (DL_FUNC) &_arrow_DictionaryType__ordered, 1}, 
		{ "_arrow_StructType__GetFieldByName", (DL_FUNC) &_arrow_StructType__GetFieldByName, 2}, 
		{ "_arrow_StructType__GetFieldIndex", (DL_FUNC) &_arrow_StructType__GetFieldIndex, 2}, 
		{ "_arrow_ListType__value_field", (DL_FUNC) &_arrow_ListType__value_field, 1}, 
		{ "_arrow_ListType__value_type", (DL_FUNC) &_arrow_ListType__value_type, 1}, 
		{ "_arrow_ipc___feather___TableWriter__SetDescription", (DL_FUNC) &_arrow_ipc___feather___TableWriter__SetDescription, 2}, 
		{ "_arrow_ipc___feather___TableWriter__SetNumRows", (DL_FUNC) &_arrow_ipc___feather___TableWriter__SetNumRows, 2}, 
		{ "_arrow_ipc___feather___TableWriter__Append", (DL_FUNC) &_arrow_ipc___feather___TableWriter__Append, 3}, 
		{ "_arrow_ipc___feather___TableWriter__Finalize", (DL_FUNC) &_arrow_ipc___feather___TableWriter__Finalize, 1}, 
		{ "_arrow_ipc___feather___TableWriter__Open", (DL_FUNC) &_arrow_ipc___feather___TableWriter__Open, 1}, 
		{ "_arrow_ipc___TableWriter__RecordBatch__WriteFeather", (DL_FUNC) &_arrow_ipc___TableWriter__RecordBatch__WriteFeather, 2}, 
		{ "_arrow_ipc___feather___TableReader__GetDescription", (DL_FUNC) &_arrow_ipc___feather___TableReader__GetDescription, 1}, 
		{ "_arrow_ipc___feather___TableReader__HasDescription", (DL_FUNC) &_arrow_ipc___feather___TableReader__HasDescription, 1}, 
		{ "_arrow_ipc___feather___TableReader__version", (DL_FUNC) &_arrow_ipc___feather___TableReader__version, 1}, 
		{ "_arrow_ipc___feather___TableReader__num_rows", (DL_FUNC) &_arrow_ipc___feather___TableReader__num_rows, 1}, 
		{ "_arrow_ipc___feather___TableReader__num_columns", (DL_FUNC) &_arrow_ipc___feather___TableReader__num_columns, 1}, 
		{ "_arrow_ipc___feather___TableReader__GetColumnName", (DL_FUNC) &_arrow_ipc___feather___TableReader__GetColumnName, 2}, 
		{ "_arrow_ipc___feather___TableReader__GetColumn", (DL_FUNC) &_arrow_ipc___feather___TableReader__GetColumn, 2}, 
		{ "_arrow_ipc___feather___TableReader__Read", (DL_FUNC) &_arrow_ipc___feather___TableReader__Read, 2}, 
		{ "_arrow_ipc___feather___TableReader__Open", (DL_FUNC) &_arrow_ipc___feather___TableReader__Open, 1}, 
		{ "_arrow_ipc___feather___TableReader__column_names", (DL_FUNC) &_arrow_ipc___feather___TableReader__column_names, 1}, 
		{ "_arrow_Field__initialize", (DL_FUNC) &_arrow_Field__initialize, 3}, 
		{ "_arrow_Field__ToString", (DL_FUNC) &_arrow_Field__ToString, 1}, 
		{ "_arrow_Field__name", (DL_FUNC) &_arrow_Field__name, 1}, 
		{ "_arrow_Field__Equals", (DL_FUNC) &_arrow_Field__Equals, 2}, 
		{ "_arrow_Field__nullable", (DL_FUNC) &_arrow_Field__nullable, 1}, 
		{ "_arrow_Field__type", (DL_FUNC) &_arrow_Field__type, 1}, 
		{ "_arrow_io___Readable__Read", (DL_FUNC) &_arrow_io___Readable__Read, 2}, 
		{ "_arrow_io___InputStream__Close", (DL_FUNC) &_arrow_io___InputStream__Close, 1}, 
		{ "_arrow_io___OutputStream__Close", (DL_FUNC) &_arrow_io___OutputStream__Close, 1}, 
		{ "_arrow_io___RandomAccessFile__GetSize", (DL_FUNC) &_arrow_io___RandomAccessFile__GetSize, 1}, 
		{ "_arrow_io___RandomAccessFile__supports_zero_copy", (DL_FUNC) &_arrow_io___RandomAccessFile__supports_zero_copy, 1}, 
		{ "_arrow_io___RandomAccessFile__Seek", (DL_FUNC) &_arrow_io___RandomAccessFile__Seek, 2}, 
		{ "_arrow_io___RandomAccessFile__Tell", (DL_FUNC) &_arrow_io___RandomAccessFile__Tell, 1}, 
		{ "_arrow_io___RandomAccessFile__Read0", (DL_FUNC) &_arrow_io___RandomAccessFile__Read0, 1}, 
		{ "_arrow_io___RandomAccessFile__ReadAt", (DL_FUNC) &_arrow_io___RandomAccessFile__ReadAt, 3}, 
		{ "_arrow_io___MemoryMappedFile__Create", (DL_FUNC) &_arrow_io___MemoryMappedFile__Create, 2}, 
		{ "_arrow_io___MemoryMappedFile__Open", (DL_FUNC) &_arrow_io___MemoryMappedFile__Open, 2}, 
		{ "_arrow_io___MemoryMappedFile__Resize", (DL_FUNC) &_arrow_io___MemoryMappedFile__Resize, 2}, 
		{ "_arrow_io___ReadableFile__Open", (DL_FUNC) &_arrow_io___ReadableFile__Open, 1}, 
		{ "_arrow_io___BufferReader__initialize", (DL_FUNC) &_arrow_io___BufferReader__initialize, 1}, 
		{ "_arrow_io___Writable__write", (DL_FUNC) &_arrow_io___Writable__write, 2}, 
		{ "_arrow_io___OutputStream__Tell", (DL_FUNC) &_arrow_io___OutputStream__Tell, 1}, 
		{ "_arrow_io___FileOutputStream__Open", (DL_FUNC) &_arrow_io___FileOutputStream__Open, 1}, 
		{ "_arrow_io___BufferOutputStream__Create", (DL_FUNC) &_arrow_io___BufferOutputStream__Create, 1}, 
		{ "_arrow_io___BufferOutputStream__capacity", (DL_FUNC) &_arrow_io___BufferOutputStream__capacity, 1}, 
		{ "_arrow_io___BufferOutputStream__Finish", (DL_FUNC) &_arrow_io___BufferOutputStream__Finish, 1}, 
		{ "_arrow_io___BufferOutputStream__Tell", (DL_FUNC) &_arrow_io___BufferOutputStream__Tell, 1}, 
		{ "_arrow_io___BufferOutputStream__Write", (DL_FUNC) &_arrow_io___BufferOutputStream__Write, 2}, 
		{ "_arrow_io___MockOutputStream__initialize", (DL_FUNC) &_arrow_io___MockOutputStream__initialize, 0}, 
		{ "_arrow_io___MockOutputStream__GetExtentBytesWritten", (DL_FUNC) &_arrow_io___MockOutputStream__GetExtentBytesWritten, 1}, 
		{ "_arrow_io___FixedSizeBufferWriter__initialize", (DL_FUNC) &_arrow_io___FixedSizeBufferWriter__initialize, 1}, 
		{ "_arrow_json___ReadOptions__initialize", (DL_FUNC) &_arrow_json___ReadOptions__initialize, 1}, 
		{ "_arrow_json___ParseOptions__initialize", (DL_FUNC) &_arrow_json___ParseOptions__initialize, 1}, 
		{ "_arrow_json___TableReader__Make", (DL_FUNC) &_arrow_json___TableReader__Make, 3}, 
		{ "_arrow_json___TableReader__Read", (DL_FUNC) &_arrow_json___TableReader__Read, 1}, 
		{ "_arrow_MemoryPool__default", (DL_FUNC) &_arrow_MemoryPool__default, 0}, 
		{ "_arrow_MemoryPool__bytes_allocated", (DL_FUNC) &_arrow_MemoryPool__bytes_allocated, 1}, 
		{ "_arrow_MemoryPool__max_memory", (DL_FUNC) &_arrow_MemoryPool__max_memory, 1}, 
		{ "_arrow_ipc___Message__body_length", (DL_FUNC) &_arrow_ipc___Message__body_length, 1}, 
		{ "_arrow_ipc___Message__metadata", (DL_FUNC) &_arrow_ipc___Message__metadata, 1}, 
		{ "_arrow_ipc___Message__body", (DL_FUNC) &_arrow_ipc___Message__body, 1}, 
		{ "_arrow_ipc___Message__Verify", (DL_FUNC) &_arrow_ipc___Message__Verify, 1}, 
		{ "_arrow_ipc___Message__type", (DL_FUNC) &_arrow_ipc___Message__type, 1}, 
		{ "_arrow_ipc___Message__Equals", (DL_FUNC) &_arrow_ipc___Message__Equals, 2}, 
		{ "_arrow_ipc___ReadRecordBatch__Message__Schema", (DL_FUNC) &_arrow_ipc___ReadRecordBatch__Message__Schema, 2}, 
		{ "_arrow_ipc___ReadSchema_InputStream", (DL_FUNC) &_arrow_ipc___ReadSchema_InputStream, 1}, 
		{ "_arrow_ipc___ReadSchema_Message", (DL_FUNC) &_arrow_ipc___ReadSchema_Message, 1}, 
		{ "_arrow_ipc___MessageReader__Open", (DL_FUNC) &_arrow_ipc___MessageReader__Open, 1}, 
		{ "_arrow_ipc___MessageReader__ReadNextMessage", (DL_FUNC) &_arrow_ipc___MessageReader__ReadNextMessage, 1}, 
		{ "_arrow_ipc___ReadMessage", (DL_FUNC) &_arrow_ipc___ReadMessage, 1}, 
		{ "_arrow_parquet___arrow___ArrowReaderProperties__Make", (DL_FUNC) &_arrow_parquet___arrow___ArrowReaderProperties__Make, 1}, 
		{ "_arrow_parquet___arrow___ArrowReaderProperties__set_use_threads", (DL_FUNC) &_arrow_parquet___arrow___ArrowReaderProperties__set_use_threads, 2}, 
		{ "_arrow_parquet___arrow___ArrowReaderProperties__get_use_threads", (DL_FUNC) &_arrow_parquet___arrow___ArrowReaderProperties__get_use_threads, 2}, 
		{ "_arrow_parquet___arrow___ArrowReaderProperties__get_read_dictionary", (DL_FUNC) &_arrow_parquet___arrow___ArrowReaderProperties__get_read_dictionary, 2}, 
		{ "_arrow_parquet___arrow___ArrowReaderProperties__set_read_dictionary", (DL_FUNC) &_arrow_parquet___arrow___ArrowReaderProperties__set_read_dictionary, 3}, 
		{ "_arrow_parquet___arrow___FileReader__OpenFile", (DL_FUNC) &_arrow_parquet___arrow___FileReader__OpenFile, 2}, 
		{ "_arrow_parquet___arrow___FileReader__ReadTable1", (DL_FUNC) &_arrow_parquet___arrow___FileReader__ReadTable1, 1}, 
		{ "_arrow_parquet___arrow___FileReader__ReadTable2", (DL_FUNC) &_arrow_parquet___arrow___FileReader__ReadTable2, 2}, 
		{ "_arrow_write_parquet_file", (DL_FUNC) &_arrow_write_parquet_file, 2}, 
		{ "_arrow_parquet___arrow___FileReader__GetSchema2", (DL_FUNC) &_arrow_parquet___arrow___FileReader__GetSchema2, 2}, 
		{ "_arrow_parquet___arrow___FileReader__GetSchema1", (DL_FUNC) &_arrow_parquet___arrow___FileReader__GetSchema1, 1}, 
		{ "_arrow_RecordBatch__num_columns", (DL_FUNC) &_arrow_RecordBatch__num_columns, 1}, 
		{ "_arrow_RecordBatch__num_rows", (DL_FUNC) &_arrow_RecordBatch__num_rows, 1}, 
		{ "_arrow_RecordBatch__schema", (DL_FUNC) &_arrow_RecordBatch__schema, 1}, 
		{ "_arrow_RecordBatch__columns", (DL_FUNC) &_arrow_RecordBatch__columns, 1}, 
		{ "_arrow_RecordBatch__column", (DL_FUNC) &_arrow_RecordBatch__column, 2}, 
		{ "_arrow_RecordBatch__from_dataframe", (DL_FUNC) &_arrow_RecordBatch__from_dataframe, 1}, 
		{ "_arrow_RecordBatch__Equals", (DL_FUNC) &_arrow_RecordBatch__Equals, 2}, 
		{ "_arrow_RecordBatch__RemoveColumn", (DL_FUNC) &_arrow_RecordBatch__RemoveColumn, 2}, 
		{ "_arrow_RecordBatch__column_name", (DL_FUNC) &_arrow_RecordBatch__column_name, 2}, 
		{ "_arrow_RecordBatch__names", (DL_FUNC) &_arrow_RecordBatch__names, 1}, 
		{ "_arrow_RecordBatch__Slice1", (DL_FUNC) &_arrow_RecordBatch__Slice1, 2}, 
		{ "_arrow_RecordBatch__Slice2", (DL_FUNC) &_arrow_RecordBatch__Slice2, 3}, 
		{ "_arrow_ipc___SerializeRecordBatch__Raw", (DL_FUNC) &_arrow_ipc___SerializeRecordBatch__Raw, 1}, 
		{ "_arrow_ipc___ReadRecordBatch__InputStream__Schema", (DL_FUNC) &_arrow_ipc___ReadRecordBatch__InputStream__Schema, 2}, 
		{ "_arrow_RecordBatch__from_arrays", (DL_FUNC) &_arrow_RecordBatch__from_arrays, 2}, 
		{ "_arrow_RecordBatchReader__schema", (DL_FUNC) &_arrow_RecordBatchReader__schema, 1}, 
		{ "_arrow_RecordBatchReader__ReadNext", (DL_FUNC) &_arrow_RecordBatchReader__ReadNext, 1}, 
		{ "_arrow_ipc___RecordBatchStreamReader__Open", (DL_FUNC) &_arrow_ipc___RecordBatchStreamReader__Open, 1}, 
		{ "_arrow_ipc___RecordBatchStreamReader__batches", (DL_FUNC) &_arrow_ipc___RecordBatchStreamReader__batches, 1}, 
		{ "_arrow_ipc___RecordBatchFileReader__schema", (DL_FUNC) &_arrow_ipc___RecordBatchFileReader__schema, 1}, 
		{ "_arrow_ipc___RecordBatchFileReader__num_record_batches", (DL_FUNC) &_arrow_ipc___RecordBatchFileReader__num_record_batches, 1}, 
		{ "_arrow_ipc___RecordBatchFileReader__ReadRecordBatch", (DL_FUNC) &_arrow_ipc___RecordBatchFileReader__ReadRecordBatch, 2}, 
		{ "_arrow_ipc___RecordBatchFileReader__Open", (DL_FUNC) &_arrow_ipc___RecordBatchFileReader__Open, 1}, 
		{ "_arrow_Table__from_RecordBatchFileReader", (DL_FUNC) &_arrow_Table__from_RecordBatchFileReader, 1}, 
		{ "_arrow_Table__from_RecordBatchStreamReader", (DL_FUNC) &_arrow_Table__from_RecordBatchStreamReader, 1}, 
		{ "_arrow_ipc___RecordBatchFileReader__batches", (DL_FUNC) &_arrow_ipc___RecordBatchFileReader__batches, 1}, 
		{ "_arrow_ipc___RecordBatchWriter__WriteRecordBatch", (DL_FUNC) &_arrow_ipc___RecordBatchWriter__WriteRecordBatch, 2}, 
		{ "_arrow_ipc___RecordBatchWriter__WriteTable", (DL_FUNC) &_arrow_ipc___RecordBatchWriter__WriteTable, 2}, 
		{ "_arrow_ipc___RecordBatchWriter__Close", (DL_FUNC) &_arrow_ipc___RecordBatchWriter__Close, 1}, 
		{ "_arrow_ipc___RecordBatchFileWriter__Open", (DL_FUNC) &_arrow_ipc___RecordBatchFileWriter__Open, 2}, 
		{ "_arrow_ipc___RecordBatchStreamWriter__Open", (DL_FUNC) &_arrow_ipc___RecordBatchStreamWriter__Open, 2}, 
		{ "_arrow_schema_", (DL_FUNC) &_arrow_schema_, 1}, 
		{ "_arrow_Schema__ToString", (DL_FUNC) &_arrow_Schema__ToString, 1}, 
		{ "_arrow_Schema__num_fields", (DL_FUNC) &_arrow_Schema__num_fields, 1}, 
		{ "_arrow_Schema__field", (DL_FUNC) &_arrow_Schema__field, 2}, 
		{ "_arrow_Schema__names", (DL_FUNC) &_arrow_Schema__names, 1}, 
		{ "_arrow_Schema__serialize", (DL_FUNC) &_arrow_Schema__serialize, 1}, 
		{ "_arrow_Schema__Equals", (DL_FUNC) &_arrow_Schema__Equals, 3}, 
		{ "_arrow_Table__from_dataframe", (DL_FUNC) &_arrow_Table__from_dataframe, 1}, 
		{ "_arrow_Table__num_columns", (DL_FUNC) &_arrow_Table__num_columns, 1}, 
		{ "_arrow_Table__num_rows", (DL_FUNC) &_arrow_Table__num_rows, 1}, 
		{ "_arrow_Table__schema", (DL_FUNC) &_arrow_Table__schema, 1}, 
		{ "_arrow_Table__column", (DL_FUNC) &_arrow_Table__column, 2}, 
		{ "_arrow_Table__columns", (DL_FUNC) &_arrow_Table__columns, 1}, 
		{ "_arrow_Table__column_names", (DL_FUNC) &_arrow_Table__column_names, 1}, 
		{ "_arrow_Table__select", (DL_FUNC) &_arrow_Table__select, 2}, 
		{ "_arrow_Table__from_dots", (DL_FUNC) &_arrow_Table__from_dots, 2}, 
		{ "_arrow_GetCpuThreadPoolCapacity", (DL_FUNC) &_arrow_GetCpuThreadPoolCapacity, 0}, 
		{ "_arrow_SetCpuThreadPoolCapacity", (DL_FUNC) &_arrow_SetCpuThreadPoolCapacity, 1}, 
		{NULL, NULL, 0}
};

RcppExport void R_init_arrow(DllInfo* dll){
  R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
  R_useDynamicSymbols(dll, FALSE);
}

